ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_bw() + stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(80)),
geom = "area", xlim = c(qnorm(0.025, mean = 98.6, sd = 0.62/sqrt(43)), qnorm(0.975, mean = 98.6, sd = 0.62/sqrt(43))),
fill = "blue", alpha = 0.5)
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_bw() + stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43)),
geom = "area", xlim = c(qnorm(0.025, mean = 98.6, sd = 0.62/sqrt(43)), qnorm(0.975, mean = 98.6, sd = 0.62/sqrt(43))),
fill = "blue", alpha = 0.5)
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_bw() + stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43)),
geom = "area", xlim = c(qnorm(0.025, mean = 98.6, sd = 0.62/sqrt(43)), qnorm(0.975, mean = 98.6, sd = 0.62/sqrt(43))),
fill = "blue", alpha = 0.5)+ geom_vline(xintercept =  c(qnorm(0.025, mean = 98.6, sd = 0.62/sqrt(43)), qnorm(0.975, mean = 98.6, sd = 0.62/sqrt(43))), color = "red")
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_bw() + stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43)),
geom = "area", xlim = c(qnorm(0.05, mean = 98.6, sd = 0.62/sqrt(43)), Inf),
fill = "blue", alpha = 0.5)+ geom_vline(xintercept =  c(qnorm(0.05, mean = 98.6, sd = 0.62/sqrt(43))), color = "red")
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_bw() + stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43)),
geom = "area", xlim = c(qnorm(0.05, mean = 98.6, sd = 0.62/sqrt(43)), Inf),
fill = "blue", alpha = 0.5)+ geom_vline(xintercept =  c(qnorm(0.05, mean = 98.6, sd = 0.62/sqrt(43))), color = "red")
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_bw() + stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43)),
geom = "area", xlim = c(qnorm(0.05, mean = 98.6, sd = 0.62/sqrt(43)), 99),
fill = "blue", alpha = 0.5)+ geom_vline(xintercept =  c(qnorm(0.05, mean = 98.6, sd = 0.62/sqrt(43))), color = "red")
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_bw() + stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43)),
geom = "area", xlim = c(98.2,qnorm(0.95, mean = 98.6, sd = 0.62/sqrt(43))),
fill = "blue", alpha = 0.5)+ geom_vline(xintercept =  c(qnorm(0.95, mean = 98.6, sd = 0.62/sqrt(43))), color = "red")
qnorm(0.975, mean = 98.6, sd = 0.62/sqrt(43))
98.6 + 1.96*0.62/sqrt(43)
98.6 + qnorm(0.975)*0.62/sqrt(43)
qnorm(c(0.025,0.975), mean = 98.6, sd = 0.62/sqrt(43))
qnorm(0.05, mean = 98.6, sd = 0.62/sqrt(43))
knitr::opts_chunk$set(echo = TRUE, error = T)
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_bw()
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_minimal()
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_classic()
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme(
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill='transparent'),
legend.box.background = element_rect(fill='transparent')
)
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme(
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill='transparent'),
legend.box.background = element_rect(fill='transparent')
)
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) + theme_classic() +
theme(
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill='transparent'),
legend.box.background = element_rect(fill='transparent')
)
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme(
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill='transparent'),
legend.box.background = element_rect(fill='transparent')
)
install.packages("ggpubr")
library(ggpubr)
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_transparent()
p<-data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_transparent()
ggsave("normal_density.png", p, bg = "transparent")
?ggsave
ggsave("normal_density.png", p, bg = "transparent", height = "50%")
ggsave("normal_density.png", p, bg = "transparent", height = "350px")
ggsave("normal_density.png", p, bg = "transparent", height = 350, units = "px")
ggsave("normal_density.png", p, bg = "transparent", height = 350,width = 600 units = "px")
ggsave("normal_density.png", p, bg = "transparent", height = 350,width = 600, units = "px")
p<-data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43)), color = "grey") +
theme_transparent()
ggsave("normal_density_grey.png", p, bg = "transparent", height = 350,width = 600, units = "px")
pnorm(98.45, mean = 98.2, sd = 0.65/sqrt(43), lower.tail = F)
qnorm(0.99,mean = 98.2, sd = 0.65/sqrt(43))
qnorm(0.95,mean = 98.2, sd = 0.65/sqrt(43))
98.45-98.2
98.2-.25
pnorm(98.45, mean = 98.2, sd = 0.65/sqrt(43), lower.tail = F)*2
98.9-98.45
98.9+.45
pnorm(98.45, mean = 98.9, sd = 0.65/sqrt(43))*2
pnorm(98.45, mean = 98.6, sd = 0.65/sqrt(43))*2
pnorm(98.45, mean = 98.8, sd = 0.65/sqrt(43))*2
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=seq(98.3,98.8), sd = sig/sqrt(43))) +
theme_bw()
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=seq(98.3,98.8, by = 1), sd = sig/sqrt(43))) +
theme_bw()
# Set parameters
sd <- 0.65 / sqrt(43)
means <- seq(98.3, 98.8, by = 0.05)
# Create a data frame with x values and corresponding density values for each mean
data <- expand.grid(x = seq(96, 101, length.out = 1000), mean = means) %>%
mutate(density = dnorm(x, mean = mean, sd = sd))
# Plot the densities
ggplot(data, aes(x = x, y = density, color = as.factor(mean))) +
geom_line(size = 1) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create a data frame with x values and corresponding density values for each mean
data <- expand.grid(x = seq(98.1, 199, length.out = 1000), mean = means) %>%
mutate(density = dnorm(x, mean = mean, sd = sd))
# Plot the densities
ggplot(data, aes(x = x, y = density, color = as.factor(mean))) +
geom_line(size = 1) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create a data frame with x values and corresponding density values for each mean
data <- expand.grid(x = seq(98.1, 99, length.out = 1000), mean = means) %>%
mutate(density = dnorm(x, mean = mean, sd = sd))
# Plot the densities
ggplot(data, aes(x = x, y = density, color = as.factor(mean))) +
geom_line(size = 1) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Plot the densities
ggplot(data, aes(x = x, y = density, color = as.factor(mean))) +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create a data frame with x values and corresponding density values for each mean
data <- expand.grid(x = seq(97.5, 99.5, length.out = 1000), mean = means) %>%
mutate(density = dnorm(x, mean = mean, sd = sd))
# Plot the densities
ggplot(data, aes(x = x, y = density, color = as.factor(mean))) +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create a data frame with x values and corresponding density values for each mean
data <- expand.grid(x = seq(97.9, 99, length.out = 1000), mean = means) %>%
mutate(density = dnorm(x, mean = mean, sd = sd))
# Plot the densities
ggplot(data, aes(x = x, y = density, color = as.factor(mean))) +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create a data frame with x values and corresponding density values for each mean
data <- expand.grid(x = seq(97.9, 99.1, length.out = 1000), mean = means) %>%
mutate(density = dnorm(x, mean = mean, sd = sd))
# Plot the densities
ggplot(data, aes(x = x, y = density, color = as.factor(mean))) +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create a data frame with x values and corresponding density values for each mean
data <- expand.grid(x = seq(97.9, 99.2, length.out = 1000), mean = means) %>%
mutate(density = dnorm(x, mean = mean, sd = sd))
# Plot the densities
ggplot(data, aes(x = x, y = density, color = as.factor(mean))) +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Plot the densities
ggplot(data, aes(x = x, y = density, color = "gret")) +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Plot the densities
ggplot(data, aes(x = x, y = density, color = "grey")) +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Plot the densities
ggplot(data, aes(x = x, y = density, color = "grey")) +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Plot the densities
ggplot(data, aes(x = x, y = density, color = "grey")) +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Plot the densities
ggplot(data, aes(x = x, y = density),color = "grey") +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Plot the densities
ggplot(data, aes(x = x, y = density)) +
geom_line(size = .5, color = "grey") +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
means <- seq(98.3, 98.8, by = 0.05)
# Create the base plot
p <- ggplot(data.frame(x = c(96, 101)), aes(x = x)) +
geom_vline(xintercept = 98.45)
# Add multiple normal density functions using stat_function
for (mean in means) {
p <- p + stat_function(fun = dnorm, args = list(mean = mean, sd = sd), aes(color = as.factor(mean)))
}
# Finalize the plot
p + labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
means
p <- p + stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = "grey")
# Create the base plot
p <- ggplot(data.frame(x = c(96, 101)), aes(x = x)) +
geom_vline(xintercept = 98.45)
# Add multiple normal density functions using stat_function
for (mean in means) {
p <- p + stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = "grey")
}
# Finalize the plot
p + labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create the base plot
p <- ggplot(data.frame(x = c(97.9, 99.2)), aes(x = x)) +
geom_vline(xintercept = 98.45)
# Add multiple normal density functions using stat_function
for (mean in means) {
p <- p + stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = "grey")
}
# Finalize the plot
p + labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create the base plot
p <- ggplot(data.frame(x = c(98, 99.2)), aes(x = x)) +
geom_vline(xintercept = 98.45)
# Add multiple normal density functions using stat_function
for (mean in means) {
p <- p + stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = "grey")
}
# Finalize the plot
p + labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create the base plot
p <- ggplot(data.frame(x = c(98, 99.2)), aes(x = x))
# Add multiple normal density functions using stat_function
for (mean in means) {
p <- p + stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = "grey")
}
# Finalize the plot
p  +
geom_vline(xintercept = 98.45) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Finalize the plot
p  +
geom_vline(xintercept = 98.45, size = 1.2) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Finalize the plot
p  +
geom_vline(xintercept = 98.45, size = 1) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create the base plot
p <- ggplot(data.frame(x = c(98, 99.2)), aes(x = x))
# Add multiple normal density functions using stat_function
for (mean in means) {
p <- p + stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = "grey")
}
# Finalize the plot
p  +
geom_vline(xintercept = 98.45, size = 1) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create the base plot
p <- ggplot(data.frame(x = c(98, 99.2)), aes(x = x))
# Add multiple normal density functions using stat_function
for (mean in means) {
p <- p + stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = "grey")
}
# Finalize the plot
p  +
geom_vline(xintercept = 98.45, size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create the base plot
p <- ggplot(data.frame(x = c(98, 99.2)), aes(x = x))
# Add multiple normal density functions using stat_function
for (mean in means) {
p <- p + stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = "grey")
}
# Finalize the plot
p  +
geom_vline(xintercept = 98.45, size = .75) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
length(unique(x_vector))
75*2* 3
75*2*3/60
7.5 + 2
library(shiny)
input = list(xbar = 98.45, s = 0.65, n = 43, mu = 98.35)
se <- input$s / sqrt(input$n)
se <- input$s / sqrt(input$n)
# Calculate the z statistic
z <- (input$xbar - input$mu) / se
# Calculate p-value
p_value <- 2 * (1 - pnorm(abs(z)))
# Define the color based on p-value and alpha
tail_color <- ifelse(p_value < input$alpha, "red", "blue")
input$alpha = 0.05
se <- input$s / sqrt(input$n)
# Calculate the z statistic
z <- (input$xbar - input$mu) / se
# Calculate p-value
p_value <- 2 * (1 - pnorm(abs(z)))
# Define the color based on p-value and alpha
tail_color <- ifelse(p_value < input$alpha, "red", "blue")
p_value
x_values <- seq(input$xbar - 5*se, input$xbar + 5*se, length.out = 1000)
# Calculate y values for the density function
y_values <- dnorm(x_values, mean = input$mu, sd = se)
# Generate the plot
p <- ggplot(data.frame(x = x_values, y = y_values), aes(x = x)) +
geom_line(aes(y = y), color = "darkgrey", size = 0.6) +
# Shade the left tail
geom_area(data = subset(data.frame(x = x_values, y = y_values), x <= min(input$xbar, 2*input$mu-input$xbar)),
aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Shade the right tail
geom_area(data = subset(data.frame(x = x_values, y = y_values), x >= max(input$xbar, 2*input$mu-input$xbar)),
aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Add vertical lines for xbar and mu
geom_vline(xintercept = input$xbar, linetype = "dashed", color = "cornflowerblue", size = 0.75) +
geom_vline(xintercept = input$mu, linetype = "dashed", color = "darkorange2", size = 0.75) +
# Add line segment to show the distance between xbar and mu
geom_segment(aes(x = input$xbar, y = 0, xend = input$mu, yend = 0), color = "black", size = .75,
arrow = grid::arrow(angle = 90, ends = "both", length = unit(.1, "inches"))) +
geom_segment(aes(x = 2*input$mu-input$xbar, y = 0, xend = input$mu, yend = 0), color = "black",
size = .75, arrow = grid::arrow(angle = 90,ends = "both",length = unit(.1, "inches")) )+
# Add labels for xbar and mu
annotate("text", x = input$xbar, y = -0.1, label = "x̄", color= "cornflowerblue", hjust = -0.2, size = 5) +
annotate("text", x = input$mu, y = -0.1, label = "μ", color = "darkorange2",  hjust = 1.2, size = 5) +
labs(title = "Normal Density with Selected Mean",
x = "Value",
y = "Density") +
theme_minimal()
library(tidyverse)
x_values <- seq(input$xbar - 5*se, input$xbar + 5*se, length.out = 1000)
# Calculate y values for the density function
y_values <- dnorm(x_values, mean = input$mu, sd = se)
# Generate the plot
p <- ggplot(data.frame(x = x_values, y = y_values), aes(x = x)) +
geom_line(aes(y = y), color = "darkgrey", size = 0.6) +
# Shade the left tail
geom_area(data = subset(data.frame(x = x_values, y = y_values), x <= min(input$xbar, 2*input$mu-input$xbar)),
aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Shade the right tail
geom_area(data = subset(data.frame(x = x_values, y = y_values), x >= max(input$xbar, 2*input$mu-input$xbar)),
aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Add vertical lines for xbar and mu
geom_vline(xintercept = input$xbar, linetype = "dashed", color = "cornflowerblue", size = 0.75) +
geom_vline(xintercept = input$mu, linetype = "dashed", color = "darkorange2", size = 0.75) +
# Add line segment to show the distance between xbar and mu
geom_segment(aes(x = input$xbar, y = 0, xend = input$mu, yend = 0), color = "black", size = .75,
arrow = grid::arrow(angle = 90, ends = "both", length = unit(.1, "inches"))) +
geom_segment(aes(x = 2*input$mu-input$xbar, y = 0, xend = input$mu, yend = 0), color = "black",
size = .75, arrow = grid::arrow(angle = 90,ends = "both",length = unit(.1, "inches")) )+
# Add labels for xbar and mu
annotate("text", x = input$xbar, y = -0.1, label = "x̄", color= "cornflowerblue", hjust = -0.2, size = 5) +
annotate("text", x = input$mu, y = -0.1, label = "μ", color = "darkorange2",  hjust = 1.2, size = 5) +
labs(title = "Normal Density with Selected Mean",
x = "Value",
y = "Density") +
theme_minimal()
p
p +
geom_segment(aes(x = input$xbar +qnorm(input$alpha/2)*se, y = 0, xend = input$xbar +qnorm(input$alpha/2)*se, yend = 0), color = "blue",
size = .75 )
input$xbar +qnorm(input$alpha/2)*se
p +
geom_segment(aes(x = input$xbar +qnorm(input$alpha/2)*se, y = -.25, xend = input$xbar +qnorm(input$alpha/2)*se, yend = -.25), color = "blue",
size = .75 )
input$xbar -qnorm(input$alpha/2)*se
input$xbar +qnorm(input$alpha/2)*se
p +
geom_segment(aes(x = input$xbar +qnorm(input$alpha/2)*se, y = -.25, xend = input$xbar -qnorm(input$alpha/2)*se, yend = -.25), color = "blue",
size = .75 )
p +
geom_segment(aes(x = input$xbar +qnorm(input$alpha/2)*se, y = -.25, xend = input$xbar -qnorm(input$alpha/2)*se, yend = -.25),lineend = "butt", color = "blue",
size = .75 )
p +
geom_segment(aes(x = input$xbar +qnorm(input$alpha/2)*se, y = -.25, xend = input$xbar -qnorm(input$alpha/2)*se, yend = -.25),lineend = "round", color = "blue",
size = .75 )
?geom_segment
p +
geom_segment(aes(x = input$xbar +qnorm(input$alpha/2)*se, y = -.25, xend = input$xbar -qnorm(input$alpha/2)*se, yend = -.25),lineend = "square", color = "blue",
size = .75 )
max(y_values)
4/15
4/16
