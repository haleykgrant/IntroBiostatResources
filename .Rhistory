labs( y = "Density", fill = element_blank())+
stat_function(fun=funcShaded, geom="area", aes(fill = "Power"), alpha=0.5)+
stat_function(fun=funcShadedRej, geom="area", aes(fill = "Rejection Region"), alpha=0.25)+
theme(legend.text = element_text(size = 10))
if(input$sides == "2-tailed"){
p1 <- p1+ geom_vline(xintercept = ctl, linetype = 2,  linewidth =0.7,color = "darkcyan")
}
p1
x
x = seq(-2,5,by=0.01)
y <- dnorm(x, mean = input$diff, sd = sqrt(2*input$sd^2/input$n))
y
y[x <= ct] <- NA
y
y <- dnorm(x, mean = 0, sd = sqrt(2*input$sd^2/input$n))
y[x <= ct & x>=ctl] <- NA
y
ctl
p1 <- ggplot(data.frame(x = rep(c(mn,mx),2)),
aes(x = x))+
stat_function(fun = dnorm, args = list(mean = 0, sd = sqrt(2*input$sd^2/input$n)),
aes(color = "Null"))+
stat_function(fun = dnorm, args = list(mean = input$diff, sd = sqrt(2*input$sd^2/input$n)),
aes(color =  "Alternative"))+
theme_bw()+
labs(color = "Hypothesis")+
geom_vline(xintercept = ct, linetype = 2, linewidth = 0.7, color = "darkcyan")+
xlab(expression(mu[A]-mu[0]))+
labs( y = "Density", fill = element_blank())+
stat_function(fun=funcShaded, geom="area", aes(fill = "Power"), alpha=0.5)+
stat_function(fun=funcShadedRej, geom="area", aes(fill = "Rejection Region"), alpha=0.25)+
theme(legend.text = element_text(size = 10))
if(input$sides == "2-tailed"){
p1 <- p1+ geom_vline(xintercept = ctl, linetype = 2,  linewidth =0.7,color = "darkcyan")
}
p1
data.frame(x = rep(c(mn,mx),2))
ggplot(data.frame(x = rep(seq(mn,mx,by=0.001))),
aes(x = x))+
stat_function(fun = dnorm, args = list(mean = 0, sd = sqrt(input$sd^2/input$n)),
aes(color = "Null"))+
stat_function(fun = dnorm, args = list(mean = input$diff, sd = sqrt(input$sd^2/input$n)),
aes(color =  "Alternative"))+
theme_bw()+
labs(color = "Hypothesis")+
geom_vline(xintercept = ct, linetype = 2, size = 0.7, color = "darkcyan")+
xlab(expression(mu[A]-mu[0]))+
labs( y = "Density", fill = element_blank())+
stat_function(fun=funcShaded, geom="area", aes(fill = "Power"), alpha=0.5)+
stat_function(fun=funcShadedRej, geom="area", aes(fill = "Rejection Region"), alpha=0.25)+
theme(legend.text = element_text(size = 10))
if(input$sides == "2-tailed"){
p1 <- p1+ geom_vline(xintercept = ctl, linetype = 2, size = 0.7,color = "darkcyan")
ggplot(data.frame(x = rep(seq(mn,mx,by=0.001))),
aes(x = x))+
stat_function(fun = dnorm, args = list(mean = 0, sd = sqrt(input$sd^2/input$n)),
aes(color = "Null"))
))
ggplot(data.frame(x = rep(seq(mn,mx,by=0.001))),
aes(x = x))
ggplot(data.frame(x = rep(seq(mn,mx,by=0.001))),
aes(x = x))+
stat_function(fun = dnorm, args = list(mean = 0, sd = sqrt(input$sd^2/input$n)),
aes(color = "Null"))
ggplot(data.frame(x = rep(seq(mn,mx,by=0.001))),
aes(x = x))+
stat_function(fun = dnorm, args = list(mean = 0, sd = sqrt(2*input$sd^2/input$n)),
aes(color = "Null"))+
stat_function(fun = dnorm, args = list(mean = input$diff, sd = sqrt(2*input$sd^2/input$n))
aes(color =  "Alternative"))
ggplot(data.frame(x = rep(seq(mn,mx,by=0.001))),
aes(x = x))+
stat_function(fun = dnorm, args = list(mean = 0, sd = sqrt(2*input$sd^2/input$n)),
aes(color = "Null"))+
stat_function(fun = dnorm, args = list(mean = input$diff, sd = sqrt(2*input$sd^2/input$n)),
aes(color =  "Alternative"))
ggplot(data.frame(x = rep(seq(mn,mx,by=0.001))),
aes(x = x))+
stat_function(fun = dnorm, args = list(mean = 0, sd = sqrt(2*input$sd^2/input$n)),
aes(color = "Null"))+
stat_function(fun = dnorm, args = list(mean = input$diff, sd = sqrt(2*input$sd^2/input$n)),
aes(color =  "Alternative"))+
theme_bw()+
labs(color = "Hypothesis")+
geom_vline(xintercept = ct, linetype = 2, size = 0.7, color = "darkcyan")+
xlab(expression(mu[A]-mu[0]))+
labs( y = "Density", fill = element_blank())+
stat_function(fun=funcShaded, geom="area", aes(fill = "Power"), alpha=0.5)+
stat_function(fun=funcShadedRej, geom="area", aes(fill = "Rejection Region"), alpha=0.25)+
theme(legend.text = element_text(size = 10))
ct = sqrt(input$sd^2/input$n)*qnorm(1-(input$alpha/2))
ctl = -sqrt(input$sd^2/input$n)*qnorm(1-(input$alpha/2))
ct
cl
ctl
sqrt(input$sd^2/input$n)
qnorm(1-(input$alpha/2)
)
input$sd^2
input$n
sqrt(input$sd^2/input$n)
if(input$sides == "2-tailed"){
ct = sqrt(input$sd^2/input$n)*qnorm(1-(input$alpha/2))
ctl = -sqrt(input$sd^2/input$n)*qnorm(1-(input$alpha/2))}
if(input$sides =="1-tailed"){
ct = sqrt(input$sd^2/input$n)*qnorm(1-(input$alpha))
ctl =-Inf
}
dnorm(x, mean = input$diff, sd = sqrt(input$sd^2/input$n))
sqrt(input$sd^2/input$n)
ggplot(data.frame(x = rep(c(mn,mx),2)),
aes(x = x))+
stat_function(fun = dnorm, args = list(mean = 0, sd = sqrt(input$sd^2/input$n)),
aes(color = "Null"))+
stat_function(fun = dnorm, args = list(mean = input$diff, sd = sqrt(input$sd^2/input$n)),
aes(color =  "Alternative"))+
theme_bw()+
labs(color = "Hypothesis")+
geom_vline(xintercept = ct, linetype = 2, linewidth = 0.7, color = "darkcyan")+
xlab(expression(mu[A]-mu[0]))+
labs( y = "Density", fill = element_blank())+
stat_function(fun=funcShaded, geom="area", aes(fill = "Power"), alpha=0.5)+
stat_function(fun=funcShadedRej, geom="area", aes(fill = "Rejection Region"), alpha=0.25)+
theme(legend.text = element_text(size = 10))
funcShaded <- function(x) {
y <- dnorm(x, mean = input$diff, sd = sqrt(input$sd^2/input$n))
y[x <= ct] <- NA
return(y)
}
funcShadedRej <- function(x) {
y <- dnorm(x, mean = 0, sd = sqrt(input$sd^2/input$n))
y[x <= ct & x>=ctl] <- NA
return(y)
}
ggplot(data.frame(x = rep(c(mn,mx),2)),
aes(x = x))+
stat_function(fun = dnorm, args = list(mean = 0, sd = sqrt(input$sd^2/input$n)),
aes(color = "Null"))+
stat_function(fun = dnorm, args = list(mean = input$diff, sd = sqrt(input$sd^2/input$n)),
aes(color =  "Alternative"))+
theme_bw()+
labs(color = "Hypothesis")+
geom_vline(xintercept = ct, linetype = 2, linewidth = 0.7, color = "darkcyan")+
xlab(expression(mu[A]-mu[0]))+
labs( y = "Density", fill = element_blank())+
stat_function(fun=funcShaded, geom="area", aes(fill = "Power"), alpha=0.5)+
stat_function(fun=funcShadedRej, geom="area", aes(fill = "Rejection Region"), alpha=0.25)+
theme(legend.text = element_text(size = 10))
p1 <- p1+ geom_vline(xintercept = ctl, linetype = 2,  linewidth =0.7,color = "darkcyan")
p1
p1 <- ggplot(data.frame(x = rep(c(mn,mx),2)),
aes(x = x))+
stat_function(fun = dnorm, args = list(mean = 0, sd = sqrt(input$sd^2/input$n)),
aes(color = "Null"))+
stat_function(fun = dnorm, args = list(mean = input$diff, sd = sqrt(input$sd^2/input$n)),
aes(color =  "Alternative"))+
theme_bw()+
labs(color = "Hypothesis")+
geom_vline(xintercept = ct, linetype = 2, linewidth = 0.7, color = "darkcyan")+
xlab(expression(mu[A]-mu[0]))+
labs( y = "Density", fill = element_blank())+
stat_function(fun=funcShaded, geom="area", aes(fill = "Power"), alpha=0.5)+
stat_function(fun=funcShadedRej, geom="area", aes(fill = "Rejection Region"), alpha=0.25)+
theme(legend.text = element_text(size = 10))
if(input$sides == "2-tailed"){
p1 <- p1+ geom_vline(xintercept = ctl, linetype = 2,  linewidth =0.7,color = "darkcyan")
}
p1
l$val
mn <- ifelse(l$val<1, -5*sqrt(2*10^2/500), rvmin$lim[l$val] )
mx <- ifelse(l$val<1, 2 + 5*sqrt(2*10^2/500), rvmax$lim[l$val] )
if(input$sides == "2-tailed"){
ct = sqrt(input$sd^2/input$n)*qnorm(1-(input$alpha/2))
ctl = -sqrt(input$sd^2/input$n)*qnorm(1-(input$alpha/2))}
if(input$sides =="1-tailed"){
ct = sqrt(input$sd^2/input$n)*qnorm(1-(input$alpha))
ctl =-Inf
}
funcShaded <- function(x) {
y <- dnorm(x, mean = input$diff, sd = sqrt(input$sd^2/input$n))
y[x <= ct] <- NA
return(y)
}
funcShadedRej <- function(x) {
y <- dnorm(x, mean = 0, sd = sqrt(input$sd^2/input$n))
y[x <= ct & x>=ctl] <- NA
return(y)
}
p1 <- ggplot(data.frame(x =seq(mn,mx,by=0.0001)),
aes(x = x))+
stat_function(fun = dnorm, args = list(mean = 0, sd = sqrt(input$sd^2/input$n)),
aes(color = "Null"))+
stat_function(fun = dnorm, args = list(mean = input$diff, sd = sqrt(input$sd^2/input$n)),
aes(color =  "Alternative"))+
theme_bw()+
labs(color = "Hypothesis")+
geom_vline(xintercept = ct, linetype = 2, linewidth = 0.7, color = "darkcyan")+
xlab(expression(mu[A]-mu[0]))+
labs( y = "Density", fill = element_blank())+
stat_function(fun=funcShaded, geom="area", aes(fill = "Power"), alpha=0.5)+
stat_function(fun=funcShadedRej, geom="area", aes(fill = "Rejection Region"), alpha=0.25)+
theme(legend.text = element_text(size = 10))
if(input$sides == "2-tailed"){
p1 <- p1+ geom_vline(xintercept = ctl, linetype = 2,  linewidth =0.7,color = "darkcyan")
}
p1
ct
ctl
x
x =seq(mn,mx,by=0.0001)
View(cbind(x,funcShaded(x)))
ct
ctl
View(cbind(x,funcShaded(x))%>%filter(abs(x)<=0.88))
View(cbind(x,funcShaded(x))%>% as.data.frame()%>%filter(abs(x)<=0.88))
View(cbind(x,funcShadedRej(x))%>% as.data.frame()%>%filter(abs(x)<=0.88))
x=seq(mn,mx,by=0.0000001)
View(cbind(x,funcShadedRej(x))%>% as.data.frame()%>%filter(abs(x)<=0.876523))
ctl
ct
?stat_function
p1 <- ggplot(data.frame(x =c(seq(mn,mx,by=0.00001),ct,ctl)),
aes(x = x))+
stat_function(fun = dnorm, args = list(mean = 0, sd = sqrt(input$sd^2/input$n)),
aes(color = "Null"))+
stat_function(fun = dnorm, args = list(mean = input$diff, sd = sqrt(input$sd^2/input$n)),
aes(color =  "Alternative"))+
theme_bw()+
labs(color = "Hypothesis")+
geom_vline(xintercept = ct, linetype = 2, linewidth = 0.7, color = "darkcyan")+
xlab(expression(mu[A]-mu[0]))+
labs( y = "Density", fill = element_blank())+
stat_function(fun=funcShaded, geom="area", aes(fill = "Power"), alpha=0.5)+
stat_function(fun=funcShadedRej, geom="area", aes(fill = "Rejection Region"), alpha=0.25)+
theme(legend.text = element_text(size = 10))
if(input$sides == "2-tailed"){
p1 <- p1+ geom_vline(xintercept = ctl, linetype = 2,  linewidth =0.7,color = "darkcyan")
}
p1
p1
p1 <- ggplot(data.frame(x =c(rep(c(mn,mx)),ct,ctl)),
aes(x = x))+
stat_function(fun = dnorm, args = list(mean = 0, sd = sqrt(input$sd^2/input$n)),
aes(color = "Null"))+
stat_function(fun = dnorm, args = list(mean = input$diff, sd = sqrt(input$sd^2/input$n)),
aes(color =  "Alternative"))+
theme_bw()+
labs(color = "Hypothesis")+
geom_vline(xintercept = ct, linetype = 2, linewidth = 0.8, color = "darkcyan")+
xlab(expression(mu[A]-mu[0]))+
labs( y = "Density", fill = element_blank())+
stat_function(fun=funcShaded, geom="area", aes(fill = "Power"), alpha=0.5)+
stat_function(fun=funcShadedRej, geom="area", aes(fill = "Rejection Region"), alpha=0.25)+
theme(legend.text = element_text(size = 10))
p1
qnorm(1-(input$alpha/2))
mn
mx
1-pnorm(1.645)
library(shiny)
?selectInput
shade_vals = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar) | x_values>=max(input$xbar, 2*input$mu-input$xbar)]
input
input = list(sides = "2-sided", xbar = 98.45, s - 0.62, n = 43, alpha = 0.05)
input = list(sides = "2-sided", xbar = 98.45, s = 0.62, n = 43, alpha = 0.05)
se <- input$s / sqrt(input$n)
min_mu <- round(input$xbar - 4 * se, digits = 2)
max_mu <- round(input$xbar + 4 * se, digits = 2)
se <- input$s / sqrt(input$n)
# Calculate the z statistic
z <- (input$xbar - input$mu) / se
if(input$sides=="2-sided"){
p_value <- 2 * (1 - pnorm(abs(z)))
} else if(input$sides=="1-sided (upper)"){
p_value <-  pnorm(z,lower.tail = F)} else{p_value <-  pnorm(z)}
p_val
p_value
z
input
input$mu = 98.2
z <- (input$xbar - input$mu) / se
# Calculate p-value
if(input$sides=="2-sided"){
p_value <- 2 * (1 - pnorm(abs(z)))
} else if(input$sides=="1-sided (upper)"){
p_value <-  pnorm(z,lower.tail = F)} else{p_value <-  pnorm(z)}
p_value
tail_color <- ifelse(p_value < input$alpha, "red", "blue")
x_values <- seq(input$xbar - 5*se, input$xbar + 5*se, length.out = 1000)
if(input$sides=="2-sided"){
shade_vals = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar) | x_values>=max(input$xbar, 2*input$mu-input$xbar)]
} else if(input$sides=="1-sided (upper)"){
shade_vals = x_values[x_values>=max(input$xbar, 2*input$mu-input$xbar)]]
if(input$sides=="2-sided"){
shade_vals = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar) | x_values>=max(input$xbar, 2*input$mu-input$xbar)]
} else if(input$sides=="1-sided (upper)"){
shade_vals = x_values[x_values>=max(input$xbar, 2*input$mu-input$xbar)]
} else{shade_vals = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar)]}
shade_vals
y_values <- dnorm(x_values, mean = input$mu, sd = se)
p <- ggplot(data.frame(x = x_values, y = y_values), aes(x = x)) +
geom_line(aes(y = y), color = "darkgrey", size = 0.6) +
# Shade the left tail
geom_area(data = subset(data.frame(x = x_values, y = y_values), x %in% shade_values),
aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Shade the right tail
#   geom_area(data = subset(data.frame(x = x_values, y = y_values), x >= max(input$xbar, 2*input$mu-input$xbar)),
#        aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Add vertical lines for xbar and mu
geom_vline(xintercept = input$xbar, linetype = "dashed", color = "cornflowerblue", size = 0.75) +
geom_vline(xintercept = input$mu, linetype = "dashed", color = "darkorange2", size = 0.75) +
# Add line segment to show the distance between xbar and mu
geom_segment(aes(x = input$xbar, y = 0, xend = input$mu, yend = 0), color = "black", size = .75,
arrow = grid::arrow(angle = 90, ends = "both", length = unit(.1, "inches"))) +
geom_segment(aes(x = 2*input$mu-input$xbar, y = 0, xend = input$mu, yend = 0), color = "black",
size = .75, arrow = grid::arrow(angle = 90,ends = "both",length = unit(.1, "inches")) )+
# Add labels for xbar and mu
annotate("text", x = input$xbar, y = -0.1, label = "x̄", color= "cornflowerblue", hjust = -0.2, size = 5) +
annotate("text", x = input$mu, y = -0.1, label = "μ", color = "darkorange2",  hjust = 1.2, size = 5) +
labs(title = "Normal Density with Selected Mean",
x = "Value",
y = "Density") +
theme_minimal() + ylim(-max(y_values)/16, max(y_values))
# Generate the plot
p <- ggplot(data.frame(x = x_values, y = y_values), aes(x = x)) +
geom_line(aes(y = y), color = "darkgrey", size = 0.6) +
# Shade the left tail
geom_area(data = subset(data.frame(x = x_values, y = y_values), x %in% shade_vals),
aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Shade the right tail
#   geom_area(data = subset(data.frame(x = x_values, y = y_values), x >= max(input$xbar, 2*input$mu-input$xbar)),
#        aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Add vertical lines for xbar and mu
geom_vline(xintercept = input$xbar, linetype = "dashed", color = "cornflowerblue", size = 0.75) +
geom_vline(xintercept = input$mu, linetype = "dashed", color = "darkorange2", size = 0.75) +
# Add line segment to show the distance between xbar and mu
geom_segment(aes(x = input$xbar, y = 0, xend = input$mu, yend = 0), color = "black", size = .75,
arrow = grid::arrow(angle = 90, ends = "both", length = unit(.1, "inches"))) +
geom_segment(aes(x = 2*input$mu-input$xbar, y = 0, xend = input$mu, yend = 0), color = "black",
size = .75, arrow = grid::arrow(angle = 90,ends = "both",length = unit(.1, "inches")) )+
# Add labels for xbar and mu
annotate("text", x = input$xbar, y = -0.1, label = "x̄", color= "cornflowerblue", hjust = -0.2, size = 5) +
annotate("text", x = input$mu, y = -0.1, label = "μ", color = "darkorange2",  hjust = 1.2, size = 5) +
labs(title = "Normal Density with Selected Mean",
x = "Value",
y = "Density") +
theme_minimal() + ylim(-max(y_values)/16, max(y_values))
p
se <- input$s / sqrt(input$n)
min_mu <- round(input$xbar - 4 * se, digits = 2)
max_mu <- round(input$xbar + 4 * se, digits = 2)
se <- input$s / sqrt(input$n)
# Calculate the z statistic
z <- (input$xbar - input$mu) / se
# Calculate p-value
if(input$sides=="2-sided"){
p_value <- 2 * (1 - pnorm(abs(z)))
} else if(input$sides=="1-sided (upper)"){
p_value <-  pnorm(z,lower.tail = F)} else{p_value <-  pnorm(z)}
# Define the color based on p-value and alpha
tail_color <- ifelse(p_value < input$alpha, "red", "blue")
# Generate x values for the plot
x_values <- seq(input$xbar - 5*se, input$xbar + 5*se, length.out = 1000)
if(input$sides=="2-sided"){
shade_vals = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar) | x_values>=max(input$xbar, 2*input$mu-input$xbar)]
} else if(input$sides=="1-sided (upper)"){
shade_vals = x_values[x_values>=max(input$xbar, 2*input$mu-input$xbar)]
} else{shade_vals = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar)]}
# Calculate y values for the density function
y_values <- dnorm(x_values, mean = input$mu, sd = se)
# Generate the plot
p <- ggplot(data.frame(x = x_values, y = y_values), aes(x = x)) +
geom_line(aes(y = y), color = "darkgrey", size = 0.6) +
# Shade the left tail
geom_area(data = subset(data.frame(x = x_values, y = y_values), x %in% shade_vals),
aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Shade the right tail
#   geom_area(data = subset(data.frame(x = x_values, y = y_values), x >= max(input$xbar, 2*input$mu-input$xbar)),
#        aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Add vertical lines for xbar and mu
geom_vline(xintercept = input$xbar, linetype = "dashed", color = "cornflowerblue", size = 0.75) +
geom_vline(xintercept = input$mu, linetype = "dashed", color = "darkorange2", size = 0.75) +
# Add line segment to show the distance between xbar and mu
geom_segment(aes(x = input$xbar, y = 0, xend = input$mu, yend = 0), color = "black", size = .75,
arrow = grid::arrow(angle = 90, ends = "both", length = unit(.1, "inches"))) +
geom_segment(aes(x = 2*input$mu-input$xbar, y = 0, xend = input$mu, yend = 0), color = "black",
size = .75, arrow = grid::arrow(angle = 90,ends = "both",length = unit(.1, "inches")) )+
# Add labels for xbar and mu
annotate("text", x = input$xbar, y = -0.1, label = "x̄", color= "cornflowerblue", hjust = -0.2, size = 5) +
annotate("text", x = input$mu, y = -0.1, label = "μ", color = "darkorange2",  hjust = 1.2, size = 5) +
labs(title = "Normal Density with Selected Mean",
x = "Value",
y = "Density") +
theme_minimal() + ylim(-max(y_values)/16, max(y_values))
p
p +
geom_segment(aes(x = input$xbar -qnorm(input$alpha)*se, y = -max(y_values)/16, xend = input$xbar, yend = -max(y_values)/16),lineend = "square", color = "blue", alpha = 0.3,
size = .75 )
p +
geom_segment(aes(x = input$xbar - qnorm(input$alpha,lower.tail = F)*se, y = -max(y_values)/16, xend = input$xbar, yend = -max(y_values)/16),lineend = "square", color = "blue", alpha = 0.3,
size = .75 )
paste0("Distance of x̄ from μ: ", round(abs(input$mu - input$xbar), 4))
paste0("Distance in standard errors: ", round(abs(input$mu - input$xbar)/(input$s/sqrt(input$n)), 4))
input
input$xbar - se
input$mu = input$xbar - se
se <- input$s / sqrt(input$n)
# Calculate the z statistic
z <- (input$xbar - input$mu) / se
# Calculate p-value
if(input$sides=="2-sided"){
p_value <- 2 * (1 - pnorm(abs(z)))
} else if(input$sides=="1-sided (upper)"){
p_value <-  pnorm(z,lower.tail = F)} else{p_value <-  pnorm(z)}
# Define the color based on p-value and alpha
tail_color <- ifelse(p_value < input$alpha, "red", "blue")
# Generate x values for the plot
x_values <- seq(input$xbar - 5*se, input$xbar + 5*se, length.out = 1000)
if(input$sides=="2-sided"){
shade_vals = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar) | x_values>=max(input$xbar, 2*input$mu-input$xbar)]
} else if(input$sides=="1-sided (upper)"){
shade_vals = x_values[x_values>=max(input$xbar, 2*input$mu-input$xbar)]
} else{shade_vals = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar)]}
# Calculate y values for the density function
y_values <- dnorm(x_values, mean = input$mu, sd = se)
# Generate the plot
p <- ggplot(data.frame(x = x_values, y = y_values), aes(x = x)) +
geom_line(aes(y = y), color = "darkgrey", size = 0.6) +
# Shade the left tail
geom_area(data = subset(data.frame(x = x_values, y = y_values), x %in% shade_vals),
aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Shade the right tail
#   geom_area(data = subset(data.frame(x = x_values, y = y_values), x >= max(input$xbar, 2*input$mu-input$xbar)),
#        aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Add vertical lines for xbar and mu
geom_vline(xintercept = input$xbar, linetype = "dashed", color = "cornflowerblue", size = 0.75) +
geom_vline(xintercept = input$mu, linetype = "dashed", color = "darkorange2", size = 0.75) +
# Add line segment to show the distance between xbar and mu
geom_segment(aes(x = input$xbar, y = 0, xend = input$mu, yend = 0), color = "black", size = .75,
arrow = grid::arrow(angle = 90, ends = "both", length = unit(.1, "inches"))) +
geom_segment(aes(x = 2*input$mu-input$xbar, y = 0, xend = input$mu, yend = 0), color = "black",
size = .75, arrow = grid::arrow(angle = 90,ends = "both",length = unit(.1, "inches")) )+
# Add labels for xbar and mu
annotate("text", x = input$xbar, y = -0.1, label = "x̄", color= "cornflowerblue", hjust = -0.2, size = 5) +
annotate("text", x = input$mu, y = -0.1, label = "μ", color = "darkorange2",  hjust = 1.2, size = 5) +
labs(title = "Normal Density with Selected Mean",
x = "Value",
y = "Density") +
theme_minimal() + ylim(-max(y_values)/16, max(y_values))
if(showCI()){
if(input$sides=="2-sided"){
p <- p +
geom_segment(aes(x = input$xbar +qnorm(input$alpha/2)*se, y = -max(y_values)/16, xend = input$xbar -qnorm(input$alpha/2)*se, yend = -max(y_values)/16),lineend = "square", color = "blue", alpha = 0.3,
size = .75 )
} else if(input$sides=="1-sided (upper)"){
p <- p +
geom_segment(aes(x = input$xbar +qnorm(input$alpha,lower.tail = F)*se, y = -max(y_values)/16, xend = input$xbar, yend = -max(y_values)/16),lineend = "square", color = "blue", alpha = 0.3,
size = .75 )
} else{
p <- p +
geom_segment(aes(x = input$xbar - qnorm(input$alpha,lower.tail = F)*se, y = -max(y_values)/16, xend = input$xbar, yend = -max(y_values)/16),lineend = "square", color = "blue", alpha = 0.3,
size = .75 )
}
}
p
input$sides=="2-sided"
x_vlaues
x_values
View(subset(data.frame(x = x_values, y = y_values), x %in% shade_vals))
y_values <- dnorm(x_values, mean = input$mu, sd = se)
y_values
View(data.frame(x = x_values, y = y_values))
View(data.frame(x = x_values, y = y_values)%>% filter( x %in% shade_vals))
mu
input$mu
se <- input$s / sqrt(input$n)
# Calculate the z statistic
z <- (input$xbar - input$mu) / se
# Calculate p-value
if(input$sides=="2-sided"){
p_value <- 2 * (1 - pnorm(abs(z)))
} else if(input$sides=="1-sided (upper)"){
p_value <-  pnorm(z,lower.tail = F)} else{p_value <-  pnorm(z)}
# Define the color based on p-value and alpha
tail_color <- ifelse(p_value < input$alpha, "red", "blue")
# Generate x values for the plot
x_values <- seq(input$xbar - 5*se, input$xbar + 5*se, length.out = 1000)
if(input$sides=="2-sided"){
shade_vals1 = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar)]
} else if(input$sides=="1-sided (upper)"){
shade_vals1 = NA
} else{shade_vals1 = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar)]}
if(input$sides=="2-sided"){
shade_vals2 = x_values[ x_values>=max(input$xbar, 2*input$mu-input$xbar)]
} else if(input$sides=="1-sided (upper)"){
shade_vals2 = x_values[x_values>=max(input$xbar, 2*input$mu-input$xbar)]
} else{shade_vals2 = NA}
# Calculate y values for the density function
y_values <- dnorm(x_values, mean = input$mu, sd = se)
1-sided (upper)
input$sides="1-sided (upper)"
z
mu
input$mu
input$xbar
input$mu
input
p_value
pnorm(z)
pnorm(z,lower.tail = F)
pnorm(z,lower.tail = F)
z
