runApp('~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Teaching/Fall 2024/BIOST 2041/Height_Resampling')
?seq_len
runApp('~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Teaching/Fall 2024/BIOST 2041/Height_Resampling')
10*sqrt(50)
5*sqrt(50)
5*sqrt(10)
50/sqrt(10)
5*log(10)
15*log(10)
15*log(50)
12*log(10)
12*log(50)
12*log(100)
10*log(100)
10*log(10)
runApp('~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Teaching/Fall 2024/BIOST 2041/Height_Resampling')
runApp('~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Teaching/Fall 2024/BIOST 2041/Height_Resampling')
runApp('~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Teaching/Fall 2024/BIOST 2041/Height_Resampling')
runApp('~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Teaching/Fall 2024/BIOST 2041/Height_Resampling')
runApp('~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Teaching/Fall 2024/BIOST 2041/Height_Resampling')
runApp('~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Teaching/Fall 2024/BIOST 2041/Height_Resampling')
runApp('~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Teaching/Fall 2024/BIOST 2041/Height_Resampling')
?hist
df <- read_csv("../../OneDrive - University of Pittsburgh/Teaching/Fall 2024/BIOST 2041/Data/height.csv")
colnames(df)
colnames(df)[1]
?observe
runApp('~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Teaching/Fall 2024/BIOST 2041/Height_Resampling')
runApp('~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Teaching/Fall 2024/BIOST 2041/Height_Resampling')
runApp('~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Teaching/Fall 2024/BIOST 2041/Height_Resampling')
runApp('~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Teaching/Fall 2024/BIOST 2041/Height_Resampling')
df
input$colName = "height"
input$colName %in% colnames(df)
df
sample_means <- numeric(input$numSamples)
input$numSamples = 10
sample_means <- numeric(input$numSamples)
samples <- vector(length = input$numSamples, mode = "list")
i=1
df[sample(nrow(df), input$sampleSize, replace = TRUE), ] %>% as.data.frame()
input$sampleSize = 10
df[sample(nrow(df), input$sampleSize, replace = TRUE), ] %>% as.data.frame()
sample_data <- df[sample(nrow(df), input$sampleSize, replace = TRUE), ] %>% as.data.frame()
mean(sample_data[[input$colName]], na.rm = TRUE)
sample_data <- df[sample(nrow(df), input$sampleSize, replace = TRUE), ] %>% as.data.frame()
sample_data[[input$colName]]
sample_means[i] <- mean(sample_data[[input$colName]])
for (i in 1:input$numSamples) {
sample_data <- df[sample(nrow(df), input$sampleSize, replace = TRUE), ] %>% as.data.frame()
samples[i] <- sample_data
sample_means[i] <- mean(sample_data[[input$colName]])
}
sample_means
runApp('~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Teaching/Fall 2024/BIOST 2041/Height_Resampling')
df
df[sample(nrow(df), input$sampleSize, replace = TRUE), input$colName] %>% as.data.frame()
runApp('~/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Teaching/Fall 2024/BIOST 2041/Height_Resampling')
shiny::headerPanel()
?headerPanel
?updateActionButton
counter = list(0)
counter
h0>0
0>0
?outputOptions
req(input$file1)
data.frame()
library(plotly)
?highlight
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(80))) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(80)),
geom = "area", xlim = c(98.2, 98.4),
fill = "blue", alpha = 0.5) + theme_bw()
mu = 98.6
# given standard deviation
sig = 0.62
# sample size
n = 43
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(80))) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(80)),
geom = "area", xlim = c(98.2, 98.4),
fill = "blue", alpha = 0.5) + theme_bw()
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(80))) +
+ theme_bw()
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(80)))
+ theme_bw()
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(80))) +
theme_bw()
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_bw()
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_bw() + stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(80)),
geom = "area", xlim = c(qnorm(0.025, mean = 98.6, sd = 0.62/sqrt(43)), qnorm(0.975, mean = 98.6, sd = 0.62/sqrt(43))),
fill = "blue", alpha = 0.5)
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_bw() + stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43)),
geom = "area", xlim = c(qnorm(0.025, mean = 98.6, sd = 0.62/sqrt(43)), qnorm(0.975, mean = 98.6, sd = 0.62/sqrt(43))),
fill = "blue", alpha = 0.5)
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_bw() + stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43)),
geom = "area", xlim = c(qnorm(0.025, mean = 98.6, sd = 0.62/sqrt(43)), qnorm(0.975, mean = 98.6, sd = 0.62/sqrt(43))),
fill = "blue", alpha = 0.5)+ geom_vline(xintercept =  c(qnorm(0.025, mean = 98.6, sd = 0.62/sqrt(43)), qnorm(0.975, mean = 98.6, sd = 0.62/sqrt(43))), color = "red")
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_bw() + stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43)),
geom = "area", xlim = c(qnorm(0.05, mean = 98.6, sd = 0.62/sqrt(43)), Inf),
fill = "blue", alpha = 0.5)+ geom_vline(xintercept =  c(qnorm(0.05, mean = 98.6, sd = 0.62/sqrt(43))), color = "red")
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_bw() + stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43)),
geom = "area", xlim = c(qnorm(0.05, mean = 98.6, sd = 0.62/sqrt(43)), Inf),
fill = "blue", alpha = 0.5)+ geom_vline(xintercept =  c(qnorm(0.05, mean = 98.6, sd = 0.62/sqrt(43))), color = "red")
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_bw() + stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43)),
geom = "area", xlim = c(qnorm(0.05, mean = 98.6, sd = 0.62/sqrt(43)), 99),
fill = "blue", alpha = 0.5)+ geom_vline(xintercept =  c(qnorm(0.05, mean = 98.6, sd = 0.62/sqrt(43))), color = "red")
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_bw() + stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43)),
geom = "area", xlim = c(98.2,qnorm(0.95, mean = 98.6, sd = 0.62/sqrt(43))),
fill = "blue", alpha = 0.5)+ geom_vline(xintercept =  c(qnorm(0.95, mean = 98.6, sd = 0.62/sqrt(43))), color = "red")
qnorm(0.975, mean = 98.6, sd = 0.62/sqrt(43))
98.6 + 1.96*0.62/sqrt(43)
98.6 + qnorm(0.975)*0.62/sqrt(43)
qnorm(c(0.025,0.975), mean = 98.6, sd = 0.62/sqrt(43))
qnorm(0.05, mean = 98.6, sd = 0.62/sqrt(43))
knitr::opts_chunk$set(echo = TRUE, error = T)
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_bw()
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_minimal()
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_classic()
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme(
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill='transparent'),
legend.box.background = element_rect(fill='transparent')
)
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme(
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill='transparent'),
legend.box.background = element_rect(fill='transparent')
)
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) + theme_classic() +
theme(
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill='transparent'),
legend.box.background = element_rect(fill='transparent')
)
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme(
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill='transparent'),
legend.box.background = element_rect(fill='transparent')
)
install.packages("ggpubr")
library(ggpubr)
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_transparent()
p<-data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43))) +
theme_transparent()
ggsave("normal_density.png", p, bg = "transparent")
?ggsave
ggsave("normal_density.png", p, bg = "transparent", height = "50%")
ggsave("normal_density.png", p, bg = "transparent", height = "350px")
ggsave("normal_density.png", p, bg = "transparent", height = 350, units = "px")
ggsave("normal_density.png", p, bg = "transparent", height = 350,width = 600 units = "px")
ggsave("normal_density.png", p, bg = "transparent", height = 350,width = 600, units = "px")
p<-data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=98.6, sd = sig/sqrt(43)), color = "grey") +
theme_transparent()
ggsave("normal_density_grey.png", p, bg = "transparent", height = 350,width = 600, units = "px")
pnorm(98.45, mean = 98.2, sd = 0.65/sqrt(43), lower.tail = F)
qnorm(0.99,mean = 98.2, sd = 0.65/sqrt(43))
qnorm(0.95,mean = 98.2, sd = 0.65/sqrt(43))
98.45-98.2
98.2-.25
pnorm(98.45, mean = 98.2, sd = 0.65/sqrt(43), lower.tail = F)*2
98.9-98.45
98.9+.45
pnorm(98.45, mean = 98.9, sd = 0.65/sqrt(43))*2
pnorm(98.45, mean = 98.6, sd = 0.65/sqrt(43))*2
pnorm(98.45, mean = 98.8, sd = 0.65/sqrt(43))*2
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=seq(98.3,98.8), sd = sig/sqrt(43))) +
theme_bw()
data.frame(x = seq(98.2,99,.01)) %>%
ggplot(aes(x = x)) +
stat_function(fun = dnorm, args = list(mean=seq(98.3,98.8, by = 1), sd = sig/sqrt(43))) +
theme_bw()
# Set parameters
sd <- 0.65 / sqrt(43)
means <- seq(98.3, 98.8, by = 0.05)
# Create a data frame with x values and corresponding density values for each mean
data <- expand.grid(x = seq(96, 101, length.out = 1000), mean = means) %>%
mutate(density = dnorm(x, mean = mean, sd = sd))
# Plot the densities
ggplot(data, aes(x = x, y = density, color = as.factor(mean))) +
geom_line(size = 1) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create a data frame with x values and corresponding density values for each mean
data <- expand.grid(x = seq(98.1, 199, length.out = 1000), mean = means) %>%
mutate(density = dnorm(x, mean = mean, sd = sd))
# Plot the densities
ggplot(data, aes(x = x, y = density, color = as.factor(mean))) +
geom_line(size = 1) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create a data frame with x values and corresponding density values for each mean
data <- expand.grid(x = seq(98.1, 99, length.out = 1000), mean = means) %>%
mutate(density = dnorm(x, mean = mean, sd = sd))
# Plot the densities
ggplot(data, aes(x = x, y = density, color = as.factor(mean))) +
geom_line(size = 1) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Plot the densities
ggplot(data, aes(x = x, y = density, color = as.factor(mean))) +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create a data frame with x values and corresponding density values for each mean
data <- expand.grid(x = seq(97.5, 99.5, length.out = 1000), mean = means) %>%
mutate(density = dnorm(x, mean = mean, sd = sd))
# Plot the densities
ggplot(data, aes(x = x, y = density, color = as.factor(mean))) +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create a data frame with x values and corresponding density values for each mean
data <- expand.grid(x = seq(97.9, 99, length.out = 1000), mean = means) %>%
mutate(density = dnorm(x, mean = mean, sd = sd))
# Plot the densities
ggplot(data, aes(x = x, y = density, color = as.factor(mean))) +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create a data frame with x values and corresponding density values for each mean
data <- expand.grid(x = seq(97.9, 99.1, length.out = 1000), mean = means) %>%
mutate(density = dnorm(x, mean = mean, sd = sd))
# Plot the densities
ggplot(data, aes(x = x, y = density, color = as.factor(mean))) +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create a data frame with x values and corresponding density values for each mean
data <- expand.grid(x = seq(97.9, 99.2, length.out = 1000), mean = means) %>%
mutate(density = dnorm(x, mean = mean, sd = sd))
# Plot the densities
ggplot(data, aes(x = x, y = density, color = as.factor(mean))) +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Plot the densities
ggplot(data, aes(x = x, y = density, color = "gret")) +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Plot the densities
ggplot(data, aes(x = x, y = density, color = "grey")) +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Plot the densities
ggplot(data, aes(x = x, y = density, color = "grey")) +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Plot the densities
ggplot(data, aes(x = x, y = density, color = "grey")) +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Plot the densities
ggplot(data, aes(x = x, y = density),color = "grey") +
geom_line(size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Plot the densities
ggplot(data, aes(x = x, y = density)) +
geom_line(size = .5, color = "grey") +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
means <- seq(98.3, 98.8, by = 0.05)
# Create the base plot
p <- ggplot(data.frame(x = c(96, 101)), aes(x = x)) +
geom_vline(xintercept = 98.45)
# Add multiple normal density functions using stat_function
for (mean in means) {
p <- p + stat_function(fun = dnorm, args = list(mean = mean, sd = sd), aes(color = as.factor(mean)))
}
# Finalize the plot
p + labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
means
p <- p + stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = "grey")
# Create the base plot
p <- ggplot(data.frame(x = c(96, 101)), aes(x = x)) +
geom_vline(xintercept = 98.45)
# Add multiple normal density functions using stat_function
for (mean in means) {
p <- p + stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = "grey")
}
# Finalize the plot
p + labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create the base plot
p <- ggplot(data.frame(x = c(97.9, 99.2)), aes(x = x)) +
geom_vline(xintercept = 98.45)
# Add multiple normal density functions using stat_function
for (mean in means) {
p <- p + stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = "grey")
}
# Finalize the plot
p + labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create the base plot
p <- ggplot(data.frame(x = c(98, 99.2)), aes(x = x)) +
geom_vline(xintercept = 98.45)
# Add multiple normal density functions using stat_function
for (mean in means) {
p <- p + stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = "grey")
}
# Finalize the plot
p + labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create the base plot
p <- ggplot(data.frame(x = c(98, 99.2)), aes(x = x))
# Add multiple normal density functions using stat_function
for (mean in means) {
p <- p + stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = "grey")
}
# Finalize the plot
p  +
geom_vline(xintercept = 98.45) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Finalize the plot
p  +
geom_vline(xintercept = 98.45, size = 1.2) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Finalize the plot
p  +
geom_vline(xintercept = 98.45, size = 1) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create the base plot
p <- ggplot(data.frame(x = c(98, 99.2)), aes(x = x))
# Add multiple normal density functions using stat_function
for (mean in means) {
p <- p + stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = "grey")
}
# Finalize the plot
p  +
geom_vline(xintercept = 98.45, size = 1) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create the base plot
p <- ggplot(data.frame(x = c(98, 99.2)), aes(x = x))
# Add multiple normal density functions using stat_function
for (mean in means) {
p <- p + stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = "grey")
}
# Finalize the plot
p  +
geom_vline(xintercept = 98.45, size = .5) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
# Create the base plot
p <- ggplot(data.frame(x = c(98, 99.2)), aes(x = x))
# Add multiple normal density functions using stat_function
for (mean in means) {
p <- p + stat_function(fun = dnorm, args = list(mean = mean, sd = sd), color = "grey")
}
# Finalize the plot
p  +
geom_vline(xintercept = 98.45, size = .75) +
labs(title = "Normal Densities with Changing Means",
x = "Value",
y = "Density",
color = "Mean") +
theme_minimal()
