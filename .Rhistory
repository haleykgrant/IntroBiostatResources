mode_RIDAGEYR
mode_RIAGEYR
# Generate new data for predictions
newdt <- data.frame (
mean_eating_window_quintile = cut(new_mean_eating_window,
breaks = quantile(new_mean_eating_window, probs = seq(0, 1, 0.2), na.rm = TRUE),
labels = FALSE),
RIDAGEYR = mode_RIAGEYR,
RIDAGEYR2 = mode_RIAGEYR^2,
RIAGENDR = factor(mode_RIAGENDR),
race = factor(mode_race),
bmi_cat = factor(mode_bmi_cat))
predict(fit1, newdata = newdt, se = TRUE)
RIAGENDR
mode_RIAGEYR
newdt
# Calculate the mode for categorical variables
mode_RIAGENDR <- mode(nhc$variables$RIAGENDR) # [1] 2 (mode) <=== Levels: 1 2
mode_RIAGENDR =0
# Generate new data for predictions
newdt <- data.frame (
mean_eating_window_quintile = cut(new_mean_eating_window,
breaks = quantile(new_mean_eating_window, probs = seq(0, 1, 0.2), na.rm = TRUE),
labels = FALSE),
RIDAGEYR = mode_RIAGEYR,
RIDAGEYR2 = mode_RIAGEYR^2,
RIAGENDR = factor(mode_RIAGENDR),
race = factor(mode_race),
bmi_cat = factor(mode_bmi_cat))
predict(fit1, newdata = newdt, se = TRUE)
newdt
predict(fit1, newdata = newdt,)
predict(fit1, newdata = newdt)
newdt2 <- data.frame (
mean_eating_window = cut(new_mean_eating_window,
breaks = quantile(new_mean_eating_window, probs = seq(0, 1, 0.2), na.rm = TRUE),
labels = FALSE),
RIDAGEYR = mode_RIAGEYR,
RIDAGEYR2 = mode_RIAGEYR^2,
RIAGENDR = factor(mode_RIAGENDR),
race = factor(mode_race),
bmi_cat = factor(mode_bmi_cat))
predict(fit1, newdata = newdt)
View(newdt)
# Generate new data for predictions
newdt <- data.frame (
mean_eating_window_quintile = cut(new_mean_eating_window,
breaks = quantile(new_mean_eating_window, probs = seq(0.1, 1, 0.2), na.rm = TRUE),
labels = FALSE),
RIDAGEYR = mode_RIAGEYR,
RIDAGEYR2 = mode_RIAGEYR^2,
RIAGENDR = factor(mode_RIAGENDR),
race = factor(mode_race),
bmi_cat = factor(mode_bmi_cat))
predict(fit1, newdata = newdt, se = TRUE)
View(newdt)
cut(new_mean_eating_window,
breaks = quantile(new_mean_eating_window, probs = seq(0.1, 1, 0.2), na.rm = TRUE),
labels = FALSE)
# Generate new data for predictions
newdt <- data.frame (
mean_eating_window_quintile = new_mean_eating_window,
RIDAGEYR = mode_RIAGEYR,
RIDAGEYR2 = mode_RIAGEYR^2,
RIAGENDR = factor(mode_RIAGENDR),
race = factor(mode_race),
bmi_cat = factor(mode_bmi_cat))
predict(fit1, newdata = newdt, se = TRUE)
View(newdt)
# Generate new data for predictions
newdt <- data.frame (
mean_eating_window_quintile = new_mean_eating_window,
RIDAGEYR = mode_RIAGEYR,
RIAGENDR = factor(mode_RIAGENDR),
race = factor(mode_race),
bmi_cat = factor(mode_bmi_cat))
predict(fit1, newdata = newdt, se = TRUE)
# Generate new data for predictions
newdt <- data.frame(
mean_eating_window = new_mean_eating_window,
RIDAGEYR = mode_RIDAGEYR,
RIAGENDR = factor(mode_RIAGENDR, levels = levels(df$RIAGENDR)),
race = factor(mode_race, levels = levels(df$race)),
bmi_cat = factor(mode_bmi_cat, levels = levels(df$bmi_cat))
)
mode_RIDAGEYR=40
# Generate new data for predictions
newdt <- data.frame(
mean_eating_window = new_mean_eating_window,
RIDAGEYR = mode_RIDAGEYR,
RIAGENDR = factor(mode_RIAGENDR, levels = levels(df$RIAGENDR)),
race = factor(mode_race, levels = levels(df$race)),
bmi_cat = factor(mode_bmi_cat, levels = levels(df$bmi_cat))
)
# Generate new data for predictions
newdt <- data.frame(
mean_eating_window = new_mean_eating_window,
RIDAGEYR = mode_RIDAGEYR,
RIAGENDR = factor(mode_RIAGENDR, levels = levels(dt$RIdAGENDR)),
race = factor(mode_race, levels = levels(dt$race)),
bmi_cat = factor(mode_bmi_cat, levels = levels(dt$bmi_cat))
)
predict(fit1, newdata = newdt, se = TRUE)
fit1
levels(dt$RIdAGENDR)
# Generate new data for predictions
newdt <- data.frame(
mean_eating_window = new_mean_eating_window,
RIDAGEYR = mode_RIDAGEYR,
RIAGENDR = factor(mode_RIAGENDR, levels = levels(dt$RIDAGENDR)),
race = factor(mode_race, levels = levels(dt$race)),
bmi_cat = factor(mode_bmi_cat, levels = levels(dt$bmi_cat))
)
levels(dt$RIDAGENDR)
# Set seed for reproducibility
set.seed(123)
# Define the number of observations
n <- 1000
# Simulate the variables
PERMTH_EXM <- runif(n, 1, 120)  # Follow-up months between 1 and 120
MORTSTAT <- rbinom(n, 1, 0.2)   # 20% mortality rate
mean_eating_window <- rnorm(n, 12, 2)  # Mean eating window (e.g., 12 hours with SD of 2)
RIDAGEYR <- runif(n, 20, 80)  # Age between 20 and 80
RIAGENDR <- rbinom(n, 1, 0.5)  # 50% males
race <- sample(c("White", "Black", "Asian", "Other"), n, replace = TRUE)
bmi_cat <- sample(c("Underweight", "Normal", "Overweight", "Obese"), n, replace = TRUE)
# Simulate the additional variables for survey design
SDMVPSU <- sample(1:2, n, replace = TRUE)  # Two primary sampling units
SDMVSTRA <- sample(1:50, n, replace = TRUE)  # Fifty strata
new_weight <- runif(n, 0.5, 1.5)  # Sampling weights between 0.5 and 1.5
# Create a data frame
dt <- data.frame(PERMTH_EXM, MORTSTAT, mean_eating_window, RIDAGEYR, RIAGENDR, race, bmi_cat, SDMVPSU, SDMVSTRA, new_weight)
names(dt)
# 2 Define survey design
des <- svydesign(ids = ~SDMVPSU, strata = ~SDMVSTRA, weights = ~new_weight, nest=TRUE, data = dt)
# Using quantile-based knot placement
fit1 <- svycoxph(Surv(PERMTH_EXM, MORTSTAT == 1) ~ rcs(mean_eating_window, quantile(mean_eating_window, probs=c(0.25, 0.5, 0.75)))+
RIDAGEYR + RIDAGEYR * RIDAGEYR + RIAGENDR + race + bmi_cat,
design = des)
new_mean_eating_window = seq(5,20,by=0.025)
# Generate new data for predictions
newdt <- data.frame(
mean_eating_window = new_mean_eating_window,
RIDAGEYR = mode_RIDAGEYR,
RIAGENDR = factor(mode_RIAGENDR, levels = levels(dt$RIDAGENDR)),
race = factor(mode_race, levels = levels(dt$race)),
bmi_cat = factor(mode_bmi_cat, levels = levels(dt$bmi_cat))
)
levels(dt$RIDAGENDR)
# Generate new data for predictions
newdt <- data.frame(
mean_eating_window = new_mean_eating_window,
RIDAGEYR = mode_RIDAGEYR,
RIAGENDR = factor(mode_RIAGENDR),
race = factor(mode_race),
bmi_cat = factor(mode_bmi_cat)
)
predict(fit1, newdata = newdt, se = TRUE)
# Load necessary libraries
library(survey)
library(survival)
library(rms)
# Set seed for reproducibility
set.seed(123)
# Define the number of observations
n <- 1000
# Simulate the variables
PERMTH_EXM <- runif(n, 1, 120)  # Follow-up months between 1 and 120
MORTSTAT <- rbinom(n, 1, 0.2)   # 20% mortality rate
mean_eating_window <- rnorm(n, 12, 2)  # Mean eating window (e.g., 12 hours with SD of 2)
RIDAGEYR <- runif(n, 20, 80)  # Age between 20 and 80
RIAGENDR <- factor(rbinom(n, 1, 0.5), labels = c("Female", "Male"))  # 50% males
race <- factor(sample(c("White", "Black", "Asian", "Other"), n, replace = TRUE))
bmi_cat <- factor(sample(c("Underweight", "Normal", "Overweight", "Obese"), n, replace = TRUE))
# Simulate the additional variables for survey design
SDMVPSU <- sample(1:2, n, replace = TRUE)  # Two primary sampling units
SDMVSTRA <- sample(1:50, n, replace = TRUE)  # Fifty strata
new_weight <- runif(n, 0.5, 1.5)  # Sampling weights between 0.5 and 1.5
# Create a data frame
df <- data.frame(PERMTH_EXM, MORTSTAT, mean_eating_window, RIDAGEYR, RIAGENDR, race, bmi_cat, SDMVPSU, SDMVSTRA, new_weight)
# Create survey design object with the new variables
design <- svydesign(ids = ~SDMVPSU, strata = ~SDMVSTRA, weights = ~new_weight, nest = TRUE, data = df)
# Fit the Cox proportional hazards model
fit1 <- svycoxph(Surv(PERMTH_EXM, MORTSTAT == 1) ~ rcs(mean_eating_window, quantile(mean_eating_window, probs = c(0.25, 0.5, 0.75))) +
RIDAGEYR + I(RIDAGEYR^2) + RIAGENDR + race + bmi_cat, design = design)
# Summary of the fitted model
summary(fit1)
# Summary of the fitted model
summary(fit1)
# Generate new data for predictions
new_mean_eating_window <- seq(5, 20, by = 0.025)
# Find the mode function
get_mode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Get the mode of the variables
mode_RIDAGEYR <- get_mode(RIDAGEYR)
mode_RIAGENDR <- get_mode(RIAGENDR)
mode_race <- get_mode(race)
mode_bmi_cat <- get_mode(bmi_cat)
# Ensure factor levels in new data match original data
newdt <- data.frame(
mean_eating_window = new_mean_eating_window,
RIDAGEYR = mode_RIDAGEYR,
RIAGENDR = factor(mode_RIAGENDR, levels = levels(df$RIAGENDR)),
race = factor(mode_race, levels = levels(df$race)),
bmi_cat = factor(mode_bmi_cat, levels = levels(df$bmi_cat))
)
newdt
a
# Get predicted values (with se = TRUE if you want standard errors for confidence intervals/etc)
predictions <- predict(fit1, newdata = newdt, se = TRUE)
predictions
# Ensure factor levels in new data match original data
newdt <- data.frame(
mean_eating_window_quantile = new_mean_eating_window,
RIDAGEYR = mode_RIDAGEYR,
RIAGENDR = factor(mode_RIAGENDR, levels = levels(df$RIAGENDR)),
race = factor(mode_race, levels = levels(df$race)),
bmi_cat = factor(mode_bmi_cat, levels = levels(df$bmi_cat))
)
# Get predicted values (with se = TRUE if you want standard errors for confidence intervals/etc)
predictions <- predict(fit1, newdata = newdt, se = TRUE)
x <- rnorm(100)
z <- rnorm(100)
y <- x + x^2 + x^3 + z
# three equally spaced knots
fit <- lm(y ~ rcs(x, -1:1) + z)
new_x <- seq(min(x), max(x), .1)
# have to use same knots X <- makepredictcall(fit, rcs(new_x, -1:1))
# add column for intercept and median of z
X <- cbind(1, X, median(z))
x <- rnorm(100)
z <- rnorm(100)
y <- x + x^2 + x^3 + z
# three equally spaced knots
fit <- lm(y ~ rcs(x, -1:1) + z)
new_x <- seq(min(x), max(x), .1)
# add column for intercept and median of z
X <- cbind(1, X, median(z))
# have to use same knots
X <- makepredictcall(fit, rcs(new_x, -1:1))
# add column for intercept and median of z
X <- cbind(1, X, median(z))
predictions <- fit$coefficients %*% t(X)
predictions
url.rda <- "https://haleykgrant.github.io/tutorial_data/data/census.rda"
download.file(url.rda, "census.rda")
load("census.rda")
library(tidyverse)
census %>%
mutate(income_mean = mean(total_personal_income))
census %>%
mutate(income_mean = mean(total_personal_income)) %>%
head()
census %>%
summarise(income_mean = mean(total_personal_income))
census %>%
summarise(income_mean = mean(total_personal_income, na.rm = T))
census %>%
drop_na(total_personal_income) %>%
summarise(mean = mean(total_personal_income),
median = median(total_personal_income),
min = min(total_personal_income),
q25 = quantile(total_personal_income, 0.25),
q75 = quantile(total_personal_income, 0.75),
max = max(total_personal_income),
sd = sd(total_personal_income),
var = var(total_personal_income))
census %>%
nrow()
# number of rows after drop_na()
census %>%
drop_na(total_personal_income) %>%
nrow()
?xtabs
xtabs(~ marital_status, data = census)
xtabs(~ marital_status, data = census) %>% prop.table()
xtabs(~ marital_status, data = census)
census %>%
group_by(marital_status) %>%
summarise(count = n())
census %>%
group_by(marital_status) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
View(census)
median(census$total_personal_income)
median(census$total_personal_income, na.rm = T)
census %>%
drop_na(total_personal_income) %>%
group_by(sex) %>%
summarise(mean = mean(total_personal_income),
median = median(total_personal_income),
min = min(total_personal_income),
q25 = quantile(total_personal_income, 0.25),
q75 = quantile(total_personal_income, 0.75),
max = max(total_personal_income),
sd = sd(total_personal_income),
var = var(total_personal_income))
View(census)
xtabs(~ marital_status + sex, data = census)
xtabs(~  sex + marital_status, data = census)
xtabs(~  sex + marital_status, data = census) %>%
addmargins()
xtabs(~  sex + marital_status, data = census) %>%
prop.table()
xtabs(~  sex + marital_status, data = census) %>%
prop.table(margin = 1) #
xtabs(~  sex + marital_status, data = census) %>%
prop.table(margin = 2)
?cor
cor(census$total_personal_income, census$age)
cor(census$total_personal_income, census$age, na.rm = T)
cor(census$total_personal_income, census$age, use = "pairwise.complete.obs")
census %>%
drop_na(age, total_personal_income) %>%
summarise(correlation = cor(age, total_personal_income))
census %>% # supply data frame
ggplot(aes(x = age, y = total_personal_income)) + # x-axis is age, y-axis is total_personal_income
geom_point()
census %>%
ggplot(aes(x = total_personal_income)) %>%
geom_histogram() +
theme_bw() +
labs(x = "Total personal income")
census %>%
ggplot(aes(x = total_personal_income)) +
geom_histogram() +
theme_bw() +
labs(x = "Total personal income")
census %>%
ggplot(aes(x = total_personal_income)) +
geom_histogram(binwidth = 1000) +
theme_bw() +
labs(x = "Total personal income")
census %>%
ggplot(aes(x = total_personal_income)) +
geom_histogram(binwidth = 5000) +
theme_bw() +
labs(x = "Total personal income")
census %>%
ggplot(aes(x = total_personal_income)) +
geom_histogram(binwidth = 10000) +
theme_bw() +
labs(x = "Total personal income")
census %>%
ggplot(aes(x = marital_status)) +
geom_bar() +
theme_bw() +
labs(x = "Marital Status")
census %>%
ggplot(aes(x = marital_status)) +
geom_classic() +
theme_bw() +
labs(x = "Marital Status") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
census %>%
ggplot(aes(x = marital_status)) +
geom_bar() +
theme_classic() +
labs(x = "Marital Status") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
census %>%
ggplot(aes(x = marital_status, fill = marital_status)) +
geom_bar() +
theme_classic() +
labs(x = "Marital Status") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
census %>%
ggplot(aes(x = marital_status, fill = marital_status)) +
geom_bar(color = "black") +
theme_classic() +
labs(x = "Marital Status") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), # rotate axis labels
legend.position = "none"  )
census %>%
ggplot(aes(x = marital_status, fill = marital_status)) +
geom_bar(color = "black") +
theme_classic() +
labs(title = "Marital Status", x = element_blank()) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), # rotate axis labels
legend.position = "none"  )
census %>%
ggplot(aes(x = total_personal_income, fill = sex)) +
geom_histogram(binwidth = 10000,  color = "black") + # bins of size $10,000
theme_bw() +
labs(x = "Total personal income") +
facet_wrap(. ~ sex, nrow = 2)
census %>%
ggplot(aes(x = total_personal_income, fill = sex)) +
geom_histogram(binwidth = 10000,  color = "black") + # bins of size $10,000
theme_bw() +
labs(x = "Total personal income") +
facet_wrap(. ~ sex, nrow = 2) +
theme(legend.position = "none")
census %>%
ggplot(aes(y = total_personal_income, x = sex, color = sex)) +
geom_boxplot() +
theme_bw() +
labs(y = "Total personal income", x = "Biological Sex") +
theme(legend.position = "none")
census %>%
ggplot(aes(x = marital_status, fill = marital_status)) +
geom_bar(color = "black") +
theme_classic() +
facet_wrap(. ~ sex) +
labs(title = "Marital Status", x = element_blank()) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), # rotate axis labels
legend.position = "none"  ) # remove color labels (labeled on x-axis, color is just for fun :) )
census %>%
ggplot(aes(x = marital_status, fill = marital_status)) +
geom_bar(color = "black") +
theme_classic() +
facet_wrap(. ~ sex, nrow = 2) +
labs(title = "Marital Status", x = element_blank()) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), # rotate axis labels
legend.position = "none"  )
census %>%
ggplot(aes(x = marital_status, fill = sex)) +
geom_bar(color = "black") +
theme_classic() +
labs(title = "Marital Status", x = element_blank()) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), # rotate axis labels
legend.position = "none"  )
census %>%
ggplot(aes(x = marital_status, fill = sex)) +
geom_bar(color = "black", position = "dodge") +
theme_classic() +
labs(title = "Marital Status", x = element_blank()) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), # rotate axis labels
legend.position = "none"  )
census %>%
group_by(sex, marital_status) %>%
summarise(count = n(),
prop = count/sum(count))
census %>%
group_by(sex, marital_status) %>%
summarise(count = n()) %>%
mutate(prop = count/sum(count))
census %>%
group_by(sex, marital_status) %>%
summarise(count = n()) %>%
mutate(prop = count/sum(count)) %>%
ggplot(aes(x = marital_status, y = prop, fill = sex)) +
geom_bar(color = "black", position = "dodge", stat = "identity") +
theme_classic() +
labs(title = "Marital Status", x = element_blank()) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), # rotate axis labels
legend.position = "none"  )
census %>%
group_by(sex, marital_status) %>%
summarise(count = n()) %>%
mutate(prop = count/sum(count)) %>%
ggplot(aes(x = marital_status, y = prop, fill = sex)) +
geom_bar(color = "black", position = "dodge", stat = "identity") +
theme_classic() +
labs(title = "Marital Status Proportions", x = element_blank(),
y = "Proportion") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)  )# rotate axis labels
census %>%
group_by(sex, marital_status) %>%
summarise(count = n()) %>%
mutate(prop = count/sum(count)) %>%
ggplot(aes(x = marital_status, y = prop, fill = sex)) +
geom_bar(color = "black", position = "dodge", stat = "identity") +
theme_classic() +
labs(title = "Marital Status Proportions", x = element_blank(),
y = "Proportion", fill = element_blank()) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)  )
census %>%
ggplot(aes(x = marital_status, fill = marital_status)) +
geom_bar(color = "black") +
theme_classic() +
labs(title = "Marital Status", x = element_blank()) +
facet_wrap(. ~ sex, nrow = 2) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), # rotate axis labels
legend.position = "none"  ) # remove color labels (labeled on x-axis, color is just for fun :) )
census %>%
ggplot(aes(x = marital_status, fill = marital_status)) +
geom_bar(color = "black") +
theme_classic() +
labs(title = "Marital Status", x = element_blank()) +
facet_wrap(. ~ sex, nrow = 1) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), # rotate axis labels
legend.position = "none"  ) # remove color labels (labeled on x-axis, color is just for fun :) )
census %>%
ggplot(aes(x = age, y = total_personal_income)) +
geom_point() +
theme_bw() +
labs(x = "Age (years)", y = "Total Personal Income ($)")
max("x_vector")
?list.files
list.files()
?download.file
?list.files
set.seed(23)
N = 100
x1 = runif(n = N, max = 10) %>% round()
library(tidyverse)
set.seed(23)
N = 100
x1 = runif(n = N, max = 10) %>% round()
y = 4.2 + 1.5*x1 + rnorm(n = N, sd = 1.3)
origx2<-(3 + 0.5*x1 +rnorm(n = N, sd =1.2))  %>% plyr::round_any(.,1)
c = 1
dt = data.frame(x1,y) %>% mutate(x1c = x1*c)
(summary(lm(y~x1c, data = dt ))$coef[2,2])
(summary(lm(y~x1c, data = dt%>%mutate(x1c = x1c*2) ))$coef[2,2])
0.04339761/sqrt(2)
0.04339761/2
