}
funcShaded <- function(x) {
y <- dnorm(x, mean = input$diff, sd = sqrt(input$sd^2/input$n))
y[x <= ct] <- NA
return(y)
}
funcShadedRej <- function(x) {
y <- dnorm(x, mean = 0, sd = sqrt(input$sd^2/input$n))
y[x <= ct & x>=ctl] <- NA
return(y)
}
p1 <- ggplot(data.frame(x =seq(mn,mx,by=0.0001)),
aes(x = x))+
stat_function(fun = dnorm, args = list(mean = 0, sd = sqrt(input$sd^2/input$n)),
aes(color = "Null"))+
stat_function(fun = dnorm, args = list(mean = input$diff, sd = sqrt(input$sd^2/input$n)),
aes(color =  "Alternative"))+
theme_bw()+
labs(color = "Hypothesis")+
geom_vline(xintercept = ct, linetype = 2, linewidth = 0.7, color = "darkcyan")+
xlab(expression(mu[A]-mu[0]))+
labs( y = "Density", fill = element_blank())+
stat_function(fun=funcShaded, geom="area", aes(fill = "Power"), alpha=0.5)+
stat_function(fun=funcShadedRej, geom="area", aes(fill = "Rejection Region"), alpha=0.25)+
theme(legend.text = element_text(size = 10))
if(input$sides == "2-tailed"){
p1 <- p1+ geom_vline(xintercept = ctl, linetype = 2,  linewidth =0.7,color = "darkcyan")
}
p1
ct
ctl
x
x =seq(mn,mx,by=0.0001)
View(cbind(x,funcShaded(x)))
ct
ctl
View(cbind(x,funcShaded(x))%>%filter(abs(x)<=0.88))
View(cbind(x,funcShaded(x))%>% as.data.frame()%>%filter(abs(x)<=0.88))
View(cbind(x,funcShadedRej(x))%>% as.data.frame()%>%filter(abs(x)<=0.88))
x=seq(mn,mx,by=0.0000001)
View(cbind(x,funcShadedRej(x))%>% as.data.frame()%>%filter(abs(x)<=0.876523))
ctl
ct
?stat_function
p1 <- ggplot(data.frame(x =c(seq(mn,mx,by=0.00001),ct,ctl)),
aes(x = x))+
stat_function(fun = dnorm, args = list(mean = 0, sd = sqrt(input$sd^2/input$n)),
aes(color = "Null"))+
stat_function(fun = dnorm, args = list(mean = input$diff, sd = sqrt(input$sd^2/input$n)),
aes(color =  "Alternative"))+
theme_bw()+
labs(color = "Hypothesis")+
geom_vline(xintercept = ct, linetype = 2, linewidth = 0.7, color = "darkcyan")+
xlab(expression(mu[A]-mu[0]))+
labs( y = "Density", fill = element_blank())+
stat_function(fun=funcShaded, geom="area", aes(fill = "Power"), alpha=0.5)+
stat_function(fun=funcShadedRej, geom="area", aes(fill = "Rejection Region"), alpha=0.25)+
theme(legend.text = element_text(size = 10))
if(input$sides == "2-tailed"){
p1 <- p1+ geom_vline(xintercept = ctl, linetype = 2,  linewidth =0.7,color = "darkcyan")
}
p1
p1
p1 <- ggplot(data.frame(x =c(rep(c(mn,mx)),ct,ctl)),
aes(x = x))+
stat_function(fun = dnorm, args = list(mean = 0, sd = sqrt(input$sd^2/input$n)),
aes(color = "Null"))+
stat_function(fun = dnorm, args = list(mean = input$diff, sd = sqrt(input$sd^2/input$n)),
aes(color =  "Alternative"))+
theme_bw()+
labs(color = "Hypothesis")+
geom_vline(xintercept = ct, linetype = 2, linewidth = 0.8, color = "darkcyan")+
xlab(expression(mu[A]-mu[0]))+
labs( y = "Density", fill = element_blank())+
stat_function(fun=funcShaded, geom="area", aes(fill = "Power"), alpha=0.5)+
stat_function(fun=funcShadedRej, geom="area", aes(fill = "Rejection Region"), alpha=0.25)+
theme(legend.text = element_text(size = 10))
p1
qnorm(1-(input$alpha/2))
mn
mx
1-pnorm(1.645)
library(shiny)
?selectInput
shade_vals = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar) | x_values>=max(input$xbar, 2*input$mu-input$xbar)]
input
input = list(sides = "2-sided", xbar = 98.45, s - 0.62, n = 43, alpha = 0.05)
input = list(sides = "2-sided", xbar = 98.45, s = 0.62, n = 43, alpha = 0.05)
se <- input$s / sqrt(input$n)
min_mu <- round(input$xbar - 4 * se, digits = 2)
max_mu <- round(input$xbar + 4 * se, digits = 2)
se <- input$s / sqrt(input$n)
# Calculate the z statistic
z <- (input$xbar - input$mu) / se
if(input$sides=="2-sided"){
p_value <- 2 * (1 - pnorm(abs(z)))
} else if(input$sides=="1-sided (upper)"){
p_value <-  pnorm(z,lower.tail = F)} else{p_value <-  pnorm(z)}
p_val
p_value
z
input
input$mu = 98.2
z <- (input$xbar - input$mu) / se
# Calculate p-value
if(input$sides=="2-sided"){
p_value <- 2 * (1 - pnorm(abs(z)))
} else if(input$sides=="1-sided (upper)"){
p_value <-  pnorm(z,lower.tail = F)} else{p_value <-  pnorm(z)}
p_value
tail_color <- ifelse(p_value < input$alpha, "red", "blue")
x_values <- seq(input$xbar - 5*se, input$xbar + 5*se, length.out = 1000)
if(input$sides=="2-sided"){
shade_vals = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar) | x_values>=max(input$xbar, 2*input$mu-input$xbar)]
} else if(input$sides=="1-sided (upper)"){
shade_vals = x_values[x_values>=max(input$xbar, 2*input$mu-input$xbar)]]
if(input$sides=="2-sided"){
shade_vals = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar) | x_values>=max(input$xbar, 2*input$mu-input$xbar)]
} else if(input$sides=="1-sided (upper)"){
shade_vals = x_values[x_values>=max(input$xbar, 2*input$mu-input$xbar)]
} else{shade_vals = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar)]}
shade_vals
y_values <- dnorm(x_values, mean = input$mu, sd = se)
p <- ggplot(data.frame(x = x_values, y = y_values), aes(x = x)) +
geom_line(aes(y = y), color = "darkgrey", size = 0.6) +
# Shade the left tail
geom_area(data = subset(data.frame(x = x_values, y = y_values), x %in% shade_values),
aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Shade the right tail
#   geom_area(data = subset(data.frame(x = x_values, y = y_values), x >= max(input$xbar, 2*input$mu-input$xbar)),
#        aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Add vertical lines for xbar and mu
geom_vline(xintercept = input$xbar, linetype = "dashed", color = "cornflowerblue", size = 0.75) +
geom_vline(xintercept = input$mu, linetype = "dashed", color = "darkorange2", size = 0.75) +
# Add line segment to show the distance between xbar and mu
geom_segment(aes(x = input$xbar, y = 0, xend = input$mu, yend = 0), color = "black", size = .75,
arrow = grid::arrow(angle = 90, ends = "both", length = unit(.1, "inches"))) +
geom_segment(aes(x = 2*input$mu-input$xbar, y = 0, xend = input$mu, yend = 0), color = "black",
size = .75, arrow = grid::arrow(angle = 90,ends = "both",length = unit(.1, "inches")) )+
# Add labels for xbar and mu
annotate("text", x = input$xbar, y = -0.1, label = "x̄", color= "cornflowerblue", hjust = -0.2, size = 5) +
annotate("text", x = input$mu, y = -0.1, label = "μ", color = "darkorange2",  hjust = 1.2, size = 5) +
labs(title = "Normal Density with Selected Mean",
x = "Value",
y = "Density") +
theme_minimal() + ylim(-max(y_values)/16, max(y_values))
# Generate the plot
p <- ggplot(data.frame(x = x_values, y = y_values), aes(x = x)) +
geom_line(aes(y = y), color = "darkgrey", size = 0.6) +
# Shade the left tail
geom_area(data = subset(data.frame(x = x_values, y = y_values), x %in% shade_vals),
aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Shade the right tail
#   geom_area(data = subset(data.frame(x = x_values, y = y_values), x >= max(input$xbar, 2*input$mu-input$xbar)),
#        aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Add vertical lines for xbar and mu
geom_vline(xintercept = input$xbar, linetype = "dashed", color = "cornflowerblue", size = 0.75) +
geom_vline(xintercept = input$mu, linetype = "dashed", color = "darkorange2", size = 0.75) +
# Add line segment to show the distance between xbar and mu
geom_segment(aes(x = input$xbar, y = 0, xend = input$mu, yend = 0), color = "black", size = .75,
arrow = grid::arrow(angle = 90, ends = "both", length = unit(.1, "inches"))) +
geom_segment(aes(x = 2*input$mu-input$xbar, y = 0, xend = input$mu, yend = 0), color = "black",
size = .75, arrow = grid::arrow(angle = 90,ends = "both",length = unit(.1, "inches")) )+
# Add labels for xbar and mu
annotate("text", x = input$xbar, y = -0.1, label = "x̄", color= "cornflowerblue", hjust = -0.2, size = 5) +
annotate("text", x = input$mu, y = -0.1, label = "μ", color = "darkorange2",  hjust = 1.2, size = 5) +
labs(title = "Normal Density with Selected Mean",
x = "Value",
y = "Density") +
theme_minimal() + ylim(-max(y_values)/16, max(y_values))
p
se <- input$s / sqrt(input$n)
min_mu <- round(input$xbar - 4 * se, digits = 2)
max_mu <- round(input$xbar + 4 * se, digits = 2)
se <- input$s / sqrt(input$n)
# Calculate the z statistic
z <- (input$xbar - input$mu) / se
# Calculate p-value
if(input$sides=="2-sided"){
p_value <- 2 * (1 - pnorm(abs(z)))
} else if(input$sides=="1-sided (upper)"){
p_value <-  pnorm(z,lower.tail = F)} else{p_value <-  pnorm(z)}
# Define the color based on p-value and alpha
tail_color <- ifelse(p_value < input$alpha, "red", "blue")
# Generate x values for the plot
x_values <- seq(input$xbar - 5*se, input$xbar + 5*se, length.out = 1000)
if(input$sides=="2-sided"){
shade_vals = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar) | x_values>=max(input$xbar, 2*input$mu-input$xbar)]
} else if(input$sides=="1-sided (upper)"){
shade_vals = x_values[x_values>=max(input$xbar, 2*input$mu-input$xbar)]
} else{shade_vals = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar)]}
# Calculate y values for the density function
y_values <- dnorm(x_values, mean = input$mu, sd = se)
# Generate the plot
p <- ggplot(data.frame(x = x_values, y = y_values), aes(x = x)) +
geom_line(aes(y = y), color = "darkgrey", size = 0.6) +
# Shade the left tail
geom_area(data = subset(data.frame(x = x_values, y = y_values), x %in% shade_vals),
aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Shade the right tail
#   geom_area(data = subset(data.frame(x = x_values, y = y_values), x >= max(input$xbar, 2*input$mu-input$xbar)),
#        aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Add vertical lines for xbar and mu
geom_vline(xintercept = input$xbar, linetype = "dashed", color = "cornflowerblue", size = 0.75) +
geom_vline(xintercept = input$mu, linetype = "dashed", color = "darkorange2", size = 0.75) +
# Add line segment to show the distance between xbar and mu
geom_segment(aes(x = input$xbar, y = 0, xend = input$mu, yend = 0), color = "black", size = .75,
arrow = grid::arrow(angle = 90, ends = "both", length = unit(.1, "inches"))) +
geom_segment(aes(x = 2*input$mu-input$xbar, y = 0, xend = input$mu, yend = 0), color = "black",
size = .75, arrow = grid::arrow(angle = 90,ends = "both",length = unit(.1, "inches")) )+
# Add labels for xbar and mu
annotate("text", x = input$xbar, y = -0.1, label = "x̄", color= "cornflowerblue", hjust = -0.2, size = 5) +
annotate("text", x = input$mu, y = -0.1, label = "μ", color = "darkorange2",  hjust = 1.2, size = 5) +
labs(title = "Normal Density with Selected Mean",
x = "Value",
y = "Density") +
theme_minimal() + ylim(-max(y_values)/16, max(y_values))
p
p +
geom_segment(aes(x = input$xbar -qnorm(input$alpha)*se, y = -max(y_values)/16, xend = input$xbar, yend = -max(y_values)/16),lineend = "square", color = "blue", alpha = 0.3,
size = .75 )
p +
geom_segment(aes(x = input$xbar - qnorm(input$alpha,lower.tail = F)*se, y = -max(y_values)/16, xend = input$xbar, yend = -max(y_values)/16),lineend = "square", color = "blue", alpha = 0.3,
size = .75 )
paste0("Distance of x̄ from μ: ", round(abs(input$mu - input$xbar), 4))
paste0("Distance in standard errors: ", round(abs(input$mu - input$xbar)/(input$s/sqrt(input$n)), 4))
input
input$xbar - se
input$mu = input$xbar - se
se <- input$s / sqrt(input$n)
# Calculate the z statistic
z <- (input$xbar - input$mu) / se
# Calculate p-value
if(input$sides=="2-sided"){
p_value <- 2 * (1 - pnorm(abs(z)))
} else if(input$sides=="1-sided (upper)"){
p_value <-  pnorm(z,lower.tail = F)} else{p_value <-  pnorm(z)}
# Define the color based on p-value and alpha
tail_color <- ifelse(p_value < input$alpha, "red", "blue")
# Generate x values for the plot
x_values <- seq(input$xbar - 5*se, input$xbar + 5*se, length.out = 1000)
if(input$sides=="2-sided"){
shade_vals = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar) | x_values>=max(input$xbar, 2*input$mu-input$xbar)]
} else if(input$sides=="1-sided (upper)"){
shade_vals = x_values[x_values>=max(input$xbar, 2*input$mu-input$xbar)]
} else{shade_vals = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar)]}
# Calculate y values for the density function
y_values <- dnorm(x_values, mean = input$mu, sd = se)
# Generate the plot
p <- ggplot(data.frame(x = x_values, y = y_values), aes(x = x)) +
geom_line(aes(y = y), color = "darkgrey", size = 0.6) +
# Shade the left tail
geom_area(data = subset(data.frame(x = x_values, y = y_values), x %in% shade_vals),
aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Shade the right tail
#   geom_area(data = subset(data.frame(x = x_values, y = y_values), x >= max(input$xbar, 2*input$mu-input$xbar)),
#        aes(x = x, y = y), fill = tail_color, alpha = 0.3) +
# Add vertical lines for xbar and mu
geom_vline(xintercept = input$xbar, linetype = "dashed", color = "cornflowerblue", size = 0.75) +
geom_vline(xintercept = input$mu, linetype = "dashed", color = "darkorange2", size = 0.75) +
# Add line segment to show the distance between xbar and mu
geom_segment(aes(x = input$xbar, y = 0, xend = input$mu, yend = 0), color = "black", size = .75,
arrow = grid::arrow(angle = 90, ends = "both", length = unit(.1, "inches"))) +
geom_segment(aes(x = 2*input$mu-input$xbar, y = 0, xend = input$mu, yend = 0), color = "black",
size = .75, arrow = grid::arrow(angle = 90,ends = "both",length = unit(.1, "inches")) )+
# Add labels for xbar and mu
annotate("text", x = input$xbar, y = -0.1, label = "x̄", color= "cornflowerblue", hjust = -0.2, size = 5) +
annotate("text", x = input$mu, y = -0.1, label = "μ", color = "darkorange2",  hjust = 1.2, size = 5) +
labs(title = "Normal Density with Selected Mean",
x = "Value",
y = "Density") +
theme_minimal() + ylim(-max(y_values)/16, max(y_values))
if(showCI()){
if(input$sides=="2-sided"){
p <- p +
geom_segment(aes(x = input$xbar +qnorm(input$alpha/2)*se, y = -max(y_values)/16, xend = input$xbar -qnorm(input$alpha/2)*se, yend = -max(y_values)/16),lineend = "square", color = "blue", alpha = 0.3,
size = .75 )
} else if(input$sides=="1-sided (upper)"){
p <- p +
geom_segment(aes(x = input$xbar +qnorm(input$alpha,lower.tail = F)*se, y = -max(y_values)/16, xend = input$xbar, yend = -max(y_values)/16),lineend = "square", color = "blue", alpha = 0.3,
size = .75 )
} else{
p <- p +
geom_segment(aes(x = input$xbar - qnorm(input$alpha,lower.tail = F)*se, y = -max(y_values)/16, xend = input$xbar, yend = -max(y_values)/16),lineend = "square", color = "blue", alpha = 0.3,
size = .75 )
}
}
p
input$sides=="2-sided"
x_vlaues
x_values
View(subset(data.frame(x = x_values, y = y_values), x %in% shade_vals))
y_values <- dnorm(x_values, mean = input$mu, sd = se)
y_values
View(data.frame(x = x_values, y = y_values))
View(data.frame(x = x_values, y = y_values)%>% filter( x %in% shade_vals))
mu
input$mu
se <- input$s / sqrt(input$n)
# Calculate the z statistic
z <- (input$xbar - input$mu) / se
# Calculate p-value
if(input$sides=="2-sided"){
p_value <- 2 * (1 - pnorm(abs(z)))
} else if(input$sides=="1-sided (upper)"){
p_value <-  pnorm(z,lower.tail = F)} else{p_value <-  pnorm(z)}
# Define the color based on p-value and alpha
tail_color <- ifelse(p_value < input$alpha, "red", "blue")
# Generate x values for the plot
x_values <- seq(input$xbar - 5*se, input$xbar + 5*se, length.out = 1000)
if(input$sides=="2-sided"){
shade_vals1 = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar)]
} else if(input$sides=="1-sided (upper)"){
shade_vals1 = NA
} else{shade_vals1 = x_values[x_values<=min(input$xbar, 2*input$mu-input$xbar)]}
if(input$sides=="2-sided"){
shade_vals2 = x_values[ x_values>=max(input$xbar, 2*input$mu-input$xbar)]
} else if(input$sides=="1-sided (upper)"){
shade_vals2 = x_values[x_values>=max(input$xbar, 2*input$mu-input$xbar)]
} else{shade_vals2 = NA}
# Calculate y values for the density function
y_values <- dnorm(x_values, mean = input$mu, sd = se)
1-sided (upper)
input$sides="1-sided (upper)"
z
mu
input$mu
input$xbar
input$mu
input
p_value
pnorm(z)
pnorm(z,lower.tail = F)
pnorm(z,lower.tail = F)
z
phat = 15/15
phat + qnorm(0.975) * sqrt(phat*(1-phat)/15)
phat - qnorm(0.975) * sqrt(phat*(1-phat)/15)
sqrt(phat*(1-phat)/15)
install.packages("shinylive")
library(shinylive)
library(httpuv)
getwd
getwd()
list.files()
shinylive::export(appdir = "ANOVA_shiny_2/", destdir = "docs")
httpuv::runStaticServer("docs/", port = 8008)
?shiny::sliderInput
library(tidyverse)
set.seed(234)
N = 150
x1 = runif(n = N, max = 10) %>% round()
y = 4.2 + 1.5*x1 + rnorm(n = N, sd = 1.3)
origx2<-(3 +rnorm(n = N, sd =.5))
X = cbind(scale(x1),scale(origx2))
c1 = var(X)
chol1 = solve(chol(c1))
newx = X %*% chol1
R2 = matrix(c(1,0.75, 0.75, 1), nrow = 2)
chol2 = chol(R2)
finalx = newx %*% chol2 * sd(x1) + mean(x1)
x2 = finalx[,2]/1.9
vals = list( x2=x2,c=1,av.data=NULL,dt=data.frame(x1, x2 =x2,y),cor = 0.75)
input = list(cor1 = 0.75, c = )
input = list(cor1 = 0.75, c = 1)
cr = as.numeric(input$cor1)
if(!cr%in%c(1,-1)){
R2 = matrix(c(1,cr, cr, 1), nrow = 2)
chol2 = chol(R2)
finalx = newx %*% chol2 * sd(x1) + mean(x1)
x2 = finalx[,2]/1.9
} else {x2 = cr * x1}
vals$x2 = x2
vals$dt = data.frame(x1, x2 = vals$x2,y) %>% mutate(r_x2 = plyr::round_any(vals$x2, .5))
vals$cor = as.numeric(input$cor1)
xres1 = round(lm(x1 ~ x2, data = vals$dt)$residuals,digits = 6)
yres1 = round(lm(y ~ x2, data = vals$dt)$residuals , digits = 6)
xres2 = round(lm(x2 ~ x1, data = vals$dt)$residuals, digits = 6)
yres2 = round(lm(y ~ x1, data = vals$dt)$residuals, digits = 6)
vals$av.data = data.frame(x_axis = c(xres1, xres2),
y_axis = c(yres1, yres2),
variable = rep(c("Removing x2", "Removing x1"),
each = 50))
dt = data.frame(x1,y) %>% mutate(x1c = x1*vals$c)
dt %>%
ggplot(aes(x = x1c, y=y)) +
geom_point() +
theme_bw() +
labs(x = paste0(vals$c," * x")) +
xlim(0, 30) +
geom_smooth(method = "lm", formula = y~x, se = F)
dt = data.frame(x1,y) %>% mutate(x1c = x1*vals$c)
se = (summary(lm(y~x1c, data = dt ))$coef[2,2]) %>%
round(digits=5)
print(paste0("Standard error for slope coefficient (\u03B2): ",se))
dt = data.frame(x1,y) %>% mutate(x1c = x1*vals$c)
se = (summary(lm(y~x1, data = dt ))$coef[2,2]) %>%
round(digits=5)
print(paste0("Standard error for original slope coefficient (\u03B2): ",se))
dt = data.frame(x1,y) %>% mutate(x1c = x1*vals$c)
sd = sd(dt$x1c) %>% round(digits = 5)
print(paste0("Standard deviation of scaled x (",vals$c,"x): ",sd))
sd = sd(x1) %>% round(digits = 5)
print(paste0("Standard deviation of x (original): ",sd))
ggpairs(vals$dt %>% select(-r_x2),
# upper = list(continuous = wrap("blank")),
lower = list(continuous = "points"),
diag = list(continuous = "densityDiag")) +
theme_bw()
library(GGally)
ggpairs(vals$dt %>% select(-r_x2),
# upper = list(continuous = wrap("blank")),
lower = list(continuous = "points"),
diag = list(continuous = "densityDiag")) +
theme_bw()
vals$dt %>%
ggplot(aes(x = x1, y=y, color = x2)) +
geom_point() +
theme_bw() +
xlim(0, 10) +
scale_color_viridis_c(option="turbo") +
labs(title  = "Data colored by x2 value")
vals$dt %>%
ggplot(aes(x = x1, y=y)) +
geom_point(aes(color = x2)) +
theme_bw() +
xlim(0, 10) +
scale_color_viridis_c(option="turbo") +
facet_wrap(.~r_x2)+
labs(title  = "Data split by x2 value") +
geom_smooth(method = "lm", se = F, linewidth = 0.5, aes(color = r_x2)) +
labs(color = "x2")
vals$dt %>%
ggplot(aes(x = x1, y=y)) +
geom_point(aes(color = x2)) +
theme_bw() +
xlim(0, 10) +
scale_color_viridis_c(option="turbo") +
facet_wrap(.~r_x2)+
labs(title  = "Data split by x2 value") +
geom_smooth(method = "lm", se = F, size = 0.5, aes(color = r_x2)) +
labs(color = "x2")+
geom_vline(data = vals$dt %>%  group_by(r_x2) %>% summarize(mean_x = mean(x1)), aes(xintercept = mean_x), linetype = "dashed", color = "black") +
geom_hline(data = vals$dt %>% group_by(r_x2) %>% summarize(mean_y = mean(y)), aes(yintercept = mean_y), linetype = "dashed", color = "black") +
theme(legend.position = "none")
vals$av.data %>%
filter(variable=="Removing x2") %>%
mutate(x2 = vals$x2)%>%
ggplot(aes(x = x_axis, y = y_axis)) +
theme_bw() +
geom_smooth(method = "lm",color = "black", se = F,linewidth = 0.5) +
geom_point(aes(color = x2)) +
# geom_smooth(method = "lm", aes(color = x2, group = x2), linewidth = 0.5, alpha = 0.1, se = F)+
labs(x = "Residuals (x1 | x2)", y = "Residuals (Y | x2)",
title = "Added Variable Plot",
subtitle = "Adjusting for x2") +
scale_color_viridis_c(option="turbo") +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
geom_vline(xintercept = 0,linetype = "dashed", color = "black")
vif = round(1/(1-as.numeric(vals$cor)^2),5)
print(paste0("Variance Inflation Factor: ",vif))
dt %>%
ggplot(aes(x = x1c, y=y)) +
geom_point() +
theme_bw() +
labs(x = paste0(vals$c," * x")) +
xlim(0, 30) +
geom_smooth(method = "lm", formula = "y ~ x", se = F)
set.seed(234)
N = 150
x1 = runif(n = N, max = 10) %>% round()
library(tidyverse)
set.seed(234)
N = 150
x1 = runif(n = N, max = 10) %>% round()
y = 4.2 + 1.5*x1 + rnorm(n = N, sd = 1.3)
origx2<-(3 +rnorm(n = N, sd =.5))
X = cbind(scale(x1),scale(origx2))
c1 = var(X)
chol1 = solve(chol(c1))
newx = X %*% chol1
R2 = matrix(c(1,0.75, 0.75, 1), nrow = 2)
chol2 = chol(R2)
finalx = newx %*% chol2 * sd(x1) + mean(x1)
x2 = finalx[,2]/1.9
dt = data.frame(x1,y) %>% mutate(x1c = x1*vals$c)
dt = data.frame(x1,y) %>% mutate(x1c = x1)
dt %>%
ggplot(aes(x = x1c, y=y)) +
geom_point() +
theme_bw() +
labs(x = paste0(vals$c," * x")) +
xlim(0, 30) +
geom_smooth(method = "lm", formula = "y ~ x", se = F)
vals = list(c=1)
dt %>%
ggplot(aes(x = x1c, y=y)) +
geom_point() +
theme_bw() +
labs(x = paste0(vals$c," * x")) +
xlim(0, 30) +
geom_smooth(method = "lm", formula = "y ~ x", se = F)
?geom_smooth
load("unhdd2020.rmph.rData", verbose = T)
library(shiny)
renderText( print(getwd()))
getwd()
data_url <- "https://haleykgrant.github.io/tutorial_data/data/bmd.csv"
data_url
list.files()
colnames(unhdd)
install.packages("shinylive")
