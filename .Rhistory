group_by(sex, marital_status) %>%
summarise(count = n()) %>%
mutate(prop = count/sum(count))
census %>%
group_by(sex, marital_status) %>%
summarise(count = n()) %>%
mutate(prop = count/sum(count)) %>%
ggplot(aes(x = marital_status, y = prop, fill = sex)) +
geom_bar(color = "black", position = "dodge", stat = "identity") +
theme_classic() +
labs(title = "Marital Status", x = element_blank()) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), # rotate axis labels
legend.position = "none"  )
census %>%
group_by(sex, marital_status) %>%
summarise(count = n()) %>%
mutate(prop = count/sum(count)) %>%
ggplot(aes(x = marital_status, y = prop, fill = sex)) +
geom_bar(color = "black", position = "dodge", stat = "identity") +
theme_classic() +
labs(title = "Marital Status Proportions", x = element_blank(),
y = "Proportion") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)  )# rotate axis labels
census %>%
group_by(sex, marital_status) %>%
summarise(count = n()) %>%
mutate(prop = count/sum(count)) %>%
ggplot(aes(x = marital_status, y = prop, fill = sex)) +
geom_bar(color = "black", position = "dodge", stat = "identity") +
theme_classic() +
labs(title = "Marital Status Proportions", x = element_blank(),
y = "Proportion", fill = element_blank()) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)  )
census %>%
ggplot(aes(x = marital_status, fill = marital_status)) +
geom_bar(color = "black") +
theme_classic() +
labs(title = "Marital Status", x = element_blank()) +
facet_wrap(. ~ sex, nrow = 2) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), # rotate axis labels
legend.position = "none"  ) # remove color labels (labeled on x-axis, color is just for fun :) )
census %>%
ggplot(aes(x = marital_status, fill = marital_status)) +
geom_bar(color = "black") +
theme_classic() +
labs(title = "Marital Status", x = element_blank()) +
facet_wrap(. ~ sex, nrow = 1) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1), # rotate axis labels
legend.position = "none"  ) # remove color labels (labeled on x-axis, color is just for fun :) )
census %>%
ggplot(aes(x = age, y = total_personal_income)) +
geom_point() +
theme_bw() +
labs(x = "Age (years)", y = "Total Personal Income ($)")
max("x_vector")
?list.files
list.files()
?download.file
?list.files
set.seed(23)
N = 100
x1 = runif(n = N, max = 10) %>% round()
library(tidyverse)
set.seed(23)
N = 100
x1 = runif(n = N, max = 10) %>% round()
y = 4.2 + 1.5*x1 + rnorm(n = N, sd = 1.3)
origx2<-(3 + 0.5*x1 +rnorm(n = N, sd =1.2))  %>% plyr::round_any(.,1)
c = 1
dt = data.frame(x1,y) %>% mutate(x1c = x1*c)
(summary(lm(y~x1c, data = dt ))$coef[2,2])
(summary(lm(y~x1c, data = dt%>%mutate(x1c = x1c*2) ))$coef[2,2])
0.04339761/sqrt(2)
0.04339761/2
library(tidyverse)
?mean
mean(x = x_vector)
?library
library(package = tidyverse)
library("plyr")
library(readxl)
x_vector = c(1, 2, 3, 1, 2, 3)
class(x_vector)
c(1, "1",2)
c(1, "1",TRUE)
?list.files
library(shiny)
?fileInput
?renderTable
dt = data.frame(`Group` = c("Population", "Sample Means"),
Mean = c(mean(data()[,1]),mean(sample_means)),
SD = c(sd(data()[,1]),sd(sample_means)))
dt = data.frame(`Group` = c("Population", "Sample Means"),
Mean = c(3,mean(sample_means)),
SD = c(1,sd(sample_means)))
dt = data.frame(`Group` = c("Population", "Sample Means"),
Mean = c(3,3.1),
SD = c(1,.2))
rownames(dt) <-c("Population", "Sample Means")
dt
dt
?tableOutput
set.seed(23)
N = 100
x1 = runif(n = N, max = 10) %>% round()
library(tidyverse)
set.seed(23)
N = 100
x1 = runif(n = N, max = 10) %>% round()
y = 4.2 + 1.5*x1 + rnorm(n = N, sd = 1.3)
origx2<-(3 + 0.5*x1 +rnorm(n = N, sd =1.2))  %>% plyr::round_any(.,1)
-(3 + 0.5*x1 )
cor(x1,(3 + 0.5*x1 ))
standardized_x2 <- scale(origx2, center = TRUE, scale = TRUE)
x2 <- 0.75 * x1 + sqrt(1 - 0.75^2) * standardized_x2
cor(x1,x2)
standardized_x2
set.seed(123)
n <- 1000
x <- rnorm(n)
y <- rnorm(n)
# Desired correlation
desired_correlation <- 0.7
# Transform y to have the desired correlation with x
y <- desired_correlation * x + sqrt(1 - desired_correlation^2) * y
# Check the correlation
cor(x, y)
desired_correlation
st_y = scale(y, center = TRUE, scale = TRUE)
y <- desired_correlation * x + sqrt(1 - desired_correlation^2) * st_y
cor(x,y)
standardized_x1 <- scale(x1, center = TRUE, scale = TRUE)
standardized_x2 <- scale(origx2, center = TRUE, scale = TRUE)
x2 <- 0.75 * standardized_x1 + sqrt(1 - 0.75^2) * standardized_x2
x2 <- plyr::round_any(x2, 1)
cor(x1,x2)
standardized_x1
standardized_x1 <- scale(x1, center = TRUE, scale = TRUE)
standardized_x2 <- scale(origx2, center = TRUE, scale = TRUE)
# Apply the formula to achieve the exact desired correlation
x2 <- desired_correlation * standardized_x1 + sqrt(1 - desired_correlation^2) * standardized_x2
# Rescale x2 back to the original scale and round
x2 <- scale(x2, center = attr(x1, "scaled:center"), scale = attr(x1, "scaled:scale"))
cor(x1,x2)
?scale
attr(x1, "scaled:center")
?cor
cov(x2,origx2)
cov(matrix(c(x2,origx2), byrow = F, ncol = 2))
matrix(c(x2,origx2), byrow = F, ncol = 2)
cov(matrix(c(x2,origx2), byrow = F, ncol = 2))
Q = cov(matrix(c(x2,origx2), byrow = F, ncol = 2))
diag(Q)
diag(diag(Q))
sqrt(diag(diag(Q)))
V = sqrt(diag(diag(Q)))
solve(V) %*% Q %*% solve(V)
diag(Q)
diag()
R2 = matrix(c(1,0.75,0.75,1))
R2
R2 = matrix(c(1,0.75,0.75,1), nrow = 2)
R2
V %*% R2 %*% V
Q
Q2 %*% solve(Q2)
Q2 = V %*% R2 %*% V
Q2 %*% solve(Q2)
Q %*% solve(Q2)
X <- cbind(scale(x1),sclae(origx2))
X <- cbind(scale(x1),scale(origx2))
c1 = var(scale(origx2))
eigen(R2)
chol2 <- chol(R2)
newx %*% chol2 * sd(x1) + mean(x1)
newx <-  scale(origx2) %*% chol1
X <- cbind(scale(x1),scale(origx2))
c1 = var(scale(origx2))
chol1 <- solve(chol(c1))
newx <-  scale(origx2) %*% chol1
finalx <- newx %*% chol2 * sd(x1) + mean(x1)
newx
chol2
newx <-  X %*% chol1
c1 = var(X)
X = cbind(scale(x1),scale(origx2))
c1 = var(X)
chol1 = solve(chol(c1))
newx = X %*% chol1
chol2 = chol(R2)
finalx = newx %*% chol2 * sd(x1) + mean(x1)
finalx
cov(finalx)
cor(finalx)
x1
x2 = finalx[,2]
set.seed(23)
N = 100
x1 = runif(n = N, max = 10) %>% round()
y = 4.2 + 1.5*x1 + rnorm(n = N, sd = 1.3)
origx2<-(3 + 0.5*x1 +rnorm(n = N, sd =1.2))  %>% plyr::round_any(.,1)
X = cbind(scale(x1),scale(origx2))
c1 = var(X)
chol1 = solve(chol(c1))
newx = X %*% chol1
set.seed(23)
N = 100
x1 = runif(n = N, max = 10) %>% round()
y = 4.2 + 1.5*x1 + rnorm(n = N, sd = 1.3)
origx2<-(3 + 0.5*x1 +rnorm(n = N, sd =1.2))  %>% plyr::round_any(.,1)
X = cbind(scale(x1),scale(origx2))
c1 = var(X)
chol1 = solve(chol(c1))
newx = X %*% chol1
R2 = matrix(c(1,0.75, 0.75, 1), nrow = 2)
chol2 = chol(R2)
finalx = newx %*% chol2 * sd(x1) + mean(x1)
x2 = finalx[,2]
vals = list(x2=x2,c=1,av.data=NULL,dt=data.frame(x1, x2 =x2,y),cor = 0.75)
vals$x2
cor(x1,x2)
xres1 = round(lm(x1 ~ x2, data = vals$dt)$residuals,digits = 6)
yres1 = round(lm(y ~ x2, data = vals$dt)$residuals , digits = 6)
xres2 = round(lm(x2 ~ x1, data = vals$dt)$residuals, digits = 6)
yres2 = round(lm(y ~ x1, data = vals$dt)$residuals, digits = 6)
vals$av.data = data.frame(x_axis = c(xres1, xres2),
y_axis = c(yres1, yres2),
variable = rep(c("Removing x2", "Removing x1"),
each = 50))
ggpairs(vals$dt,
upper = list(continuous = wrap("blank")),
lower = list(continuous = "points"),
diag = list(continuous = "densityDiag")) +
theme_bw()
library(GGally)
ggpairs(vals$dt,
upper = list(continuous = wrap("blank")),
lower = list(continuous = "points"),
diag = list(continuous = "densityDiag")) +
theme_bw()
dt = data.frame(x1,y) %>% mutate(x1c = x1*vals$c)
dt %>%
ggplot(aes(x = x1c, y=y)) +
geom_point() +
theme_bw() +
labs(x = paste0(vals$c," * x")) +
xlim(0, 30) +
geom_smooth(method = "lm", formula = y~x, se = F)
dt = data.frame(x1,y) %>% mutate(x1c = x1*vals$c)
se = (summary(lm(y~x1c, data = dt ))$coef[2,2]) %>%
round(digits=5)
print(paste0("Standard error for slope coefficient (\u03B2): ",se))
dt = data.frame(x1,y) %>% mutate(x1c = x1*vals$c)
se = (summary(lm(y~x1, data = dt ))$coef[2,2]) %>%
round(digits=5)
print(paste0("Standard error for original slope coefficient (\u03B2): ",se))
dt = data.frame(x1,y) %>% mutate(x1c = x1*vals$c)
sd = sd(dt$x1c) %>% round(digits = 5)
print(paste0("Standard deviation of scaled x (",vals$c,"x): ",sd))
sd = sd(x1) %>% round(digits = 5)
print(paste0("Standard deviation of x (original): ",sd))
vals$dt %>%
ggplot(aes(x = x1, y=y, color = x2)) +
geom_point() +
theme_bw() +
xlim(0, 10) +
scale_color_viridis_c(option="turbo") +
labs(title  = "Data colored by x2 value")
vals$dt %>%
ggplot(aes(x = x1, y=y, color = x2)) +
geom_point() +
theme_bw() +
xlim(0, 10) +
scale_color_viridis_c(option="turbo") +
facet_wrap(.~x2)+
labs(title  = "Data split by x2 value") +
geom_smooth(method = "lm", se = F, linewidth = 0.5) +
labs(color = "x2")
vals$dt %>%
ggplot(aes(x = x1, y=y, color = x2)) +
geom_point() +
theme_bw() +
xlim(0, 10) +
scale_color_viridis_c(option="turbo") +
facet_wrap(.~round(x2))+
labs(title  = "Data split by x2 value") +
geom_smooth(method = "lm", se = F, linewidth = 0.5) +
labs(color = "x2")
vals$dt %>%
ggplot(aes(x = x1, y=y, color = x2)) +
geom_point() +
theme_bw() +
xlim(0, 10) +
scale_color_viridis_c(option="turbo") +
facet_wrap(.~round(x2))+
labs(title  = "Data split by x2 value") +
geom_smooth(method = "lm", se = F, linewidth = 0.5, color = round(x2)) +
labs(color = "x2")
vals$dt %>%
mutate(r_x2 = round(x2)) %>%
ggplot(aes(x = x1, y=y)) +
geom_point(aes(color = x2)) +
theme_bw() +
xlim(0, 10) +
scale_color_viridis_c(option="turbo") +
facet_wrap(.~r_x2))+
vals$dt %>%
mutate(r_x2 = round(x2)) %>%
ggplot(aes(x = x1, y=y)) +
geom_point(aes(color = x2)) +
theme_bw() +
xlim(0, 10) +
scale_color_viridis_c(option="turbo") +
facet_wrap(.~r_x2)+
labs(title  = "Data split by x2 value") +
geom_smooth(method = "lm", se = F, linewidth = 0.5, aes(color = r_x2)) +
labs(color = "x2")
x2
vals$dt$x2
vals$dt %>%
ggplot(aes(x = x1, y=y, color = x2)) +
geom_point() +
theme_bw() +
xlim(0, 10) +
scale_color_viridis_c(option="turbo") +
facet_wrap(.~x2)+
labs(title  = "Data split by x2 value") +
geom_smooth(method = "lm", se = F, size = 0.5) +
labs(color = "x2")+
geom_vline(data = vals$dt %>%  group_by(x2) %>% summarize(mean_x = mean(x1)), aes(xintercept = mean_x), linetype = "dashed", color = "black") +
geom_hline(data = vals$dt %>% group_by(x2) %>% summarize(mean_y = mean(y)), aes(yintercept = mean_y), linetype = "dashed", color = "black") +
theme(legend.position = "none")
vals$dt %>%
mutate(r_x2 = round(x2)) %>%
ggplot(aes(x = x1, y=y)) +
geom_point(aes(color = x2)) +
theme_bw() +
xlim(0, 10) +
scale_color_viridis_c(option="turbo") +
facet_wrap(.~r_x2)+
labs(title  = "Data split by x2 value") +
geom_smooth(method = "lm", se = F, size = 0.5, aes(color = r_x2)) +
labs(color = "x2")+
geom_vline(data = vals$dt %>%  group_by(r_x2) %>% summarize(mean_x = mean(x1)), aes(xintercept = mean_x), linetype = "dashed", color = "black") +
geom_hline(data = vals$dt %>% group_by(r_x2) %>% summarize(mean_y = mean(y)), aes(yintercept = mean_y), linetype = "dashed", color = "black") +
theme(legend.position = "none")
vals$dt = data.frame(x1, x2 = vals$x2,y) %>% mutate(r_x2 = round(x2))
vals$dt %>%
ggplot(aes(x = x1, y=y)) +
geom_point(aes(color = x2)) +
theme_bw() +
xlim(0, 10) +
scale_color_viridis_c(option="turbo") +
facet_wrap(.~r_x2)+
labs(title  = "Data split by x2 value") +
geom_smooth(method = "lm", se = F, linewidth = 0.5, aes(color = r_x2)) +
labs(color = "x2")
vals$dt %>%
ggplot(aes(x = x1, y=y)) +
geom_point(aes(color = x2)) +
theme_bw() +
xlim(0, 10) +
scale_color_viridis_c(option="turbo") +
facet_wrap(.~r_x2)+
labs(title  = "Data split by x2 value") +
geom_smooth(method = "lm", se = F, size = 0.5, aes(color = r_x2)) +
labs(color = "x2")+
geom_vline(data = vals$dt %>%  group_by(r_x2) %>% summarize(mean_x = mean(x1)), aes(xintercept = mean_x), linetype = "dashed", color = "black") +
geom_hline(data = vals$dt %>% group_by(r_x2) %>% summarize(mean_y = mean(y)), aes(yintercept = mean_y), linetype = "dashed", color = "black") +
theme(legend.position = "none")
vals$av.data %>%
filter(variable=="Removing x2") %>%
mutate(x2 = vals$x2)%>%
ggplot(aes(x = x_axis, y = y_axis)) +
theme_bw() +
geom_smooth(method = "lm",color = "black", se = F,linewidth = 0.5) +
geom_point(aes(color = x2)) +
# geom_smooth(method = "lm", aes(color = x2, group = x2), linewidth = 0.5, alpha = 0.1, se = F)+
labs(x = "Residuals (x1 | x2)", y = "Residuals (Y | x2)",
title = "Added Variable Plot",
subtitle = "Adjusting for x2") +
scale_color_viridis_c(option="turbo") +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
geom_vline(xintercept = 0,linetype = "dashed", color = "black")
input
input = list(c =1, cor1 = "0.75")
set.seed(23)
N = 100
x1 = runif(n = N, max = 10) %>% round()
y = 4.2 + 1.5*x1 + rnorm(n = N, sd = 1.3)
origx2<-(3 + 0.5*x1 +rnorm(n = N, sd =1.2))  %>% plyr::round_any(.,1)
X = cbind(scale(x1),scale(origx2))
c1 = var(X)
chol1 = solve(chol(c1))
newx = X %*% chol1
R2 = matrix(c(1,0.75, 0.75, 1), nrow = 2)
chol2 = chol(R2)
finalx = newx %*% chol2 * sd(x1) + mean(x1)
x2 = finalx[,2]
cr = as.numeric(input$cor1)
cr
R2 = matrix(c(1,cr, cr, 1), nrow = 2)
chol2 = chol(R2)
finalx = newx %*% chol2 * sd(x1) + mean(x1)
x2 = finalx[,2]
x2
vals$x2 = x2
vals$dt = data.frame(x1, x2 = vals$x2,y) %>% mutate(r_x2 = round(x2))
vals$cor = as.numeric(input$cor1)
xres1 = round(lm(x1 ~ x2, data = vals$dt)$residuals,digits = 6)
yres1 = round(lm(y ~ x2, data = vals$dt)$residuals , digits = 6)
xres2 = round(lm(x2 ~ x1, data = vals$dt)$residuals, digits = 6)
yres2 = round(lm(y ~ x1, data = vals$dt)$residuals, digits = 6)
vals$av.data = data.frame(x_axis = c(xres1, xres2),
y_axis = c(yres1, yres2),
variable = rep(c("Removing x2", "Removing x1"),
each = 50))
ggpairs(vals$dt,
upper = list(continuous = wrap("blank")),
lower = list(continuous = "points"),
diag = list(continuous = "densityDiag")) +
theme_bw()
ggpairs(vals$dt %>% select(-r_x2),
upper = list(continuous = wrap("blank")),
lower = list(continuous = "points"),
diag = list(continuous = "densityDiag")) +
theme_bw()
vals$dt %>%
ggplot(aes(x = x1, y=y, color = x2)) +
geom_point() +
theme_bw() +
xlim(0, 10) +
scale_color_viridis_c(option="turbo") +
labs(title  = "Data colored by x2 value")
vals$dt %>%
ggplot(aes(x = x1, y=y)) +
geom_point(aes(color = x2)) +
theme_bw() +
xlim(0, 10) +
scale_color_viridis_c(option="turbo") +
facet_wrap(.~r_x2)+
labs(title  = "Data split by x2 value") +
geom_smooth(method = "lm", se = F, linewidth = 0.5, aes(color = r_x2)) +
labs(color = "x2")
vals$dt %>%
ggplot(aes(x = x1, y=y)) +
geom_point(aes(color = x2)) +
theme_bw() +
xlim(0, 10) +
scale_color_viridis_c(option="turbo") +
facet_wrap(.~r_x2)+
labs(title  = "Data split by x2 value") +
geom_smooth(method = "lm", se = F, size = 0.5, aes(color = r_x2)) +
labs(color = "x2")+
geom_vline(data = vals$dt %>%  group_by(r_x2) %>% summarize(mean_x = mean(x1)), aes(xintercept = mean_x), linetype = "dashed", color = "black") +
geom_hline(data = vals$dt %>% group_by(r_x2) %>% summarize(mean_y = mean(y)), aes(yintercept = mean_y), linetype = "dashed", color = "black") +
theme(legend.position = "none")
vals$av.data %>%
filter(variable=="Removing x2") %>%
mutate(x2 = vals$x2)%>%
ggplot(aes(x = x_axis, y = y_axis)) +
theme_bw() +
geom_smooth(method = "lm",color = "black", se = F,linewidth = 0.5) +
geom_point(aes(color = x2)) +
# geom_smooth(method = "lm", aes(color = x2, group = x2), linewidth = 0.5, alpha = 0.1, se = F)+
labs(x = "Residuals (x1 | x2)", y = "Residuals (Y | x2)",
title = "Added Variable Plot",
subtitle = "Adjusting for x2") +
scale_color_viridis_c(option="turbo") +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
geom_vline(xintercept = 0,linetype = "dashed", color = "black")
vif = round(1/(1-as.numeric(vals$cor)^2),5)
print(paste0("Variance Inflation Factor: ",vif))
cor(x1,x2)
shiny::runApp('~/VIF')
runApp('~/VIF')
runApp('~/VIF')
vals$dt %>%
ggplot(aes(x = x1, y=y)) +
geom_point(aes(color = x2)) +
theme_bw() +
xlim(0, 10) +
scale_color_viridis_c(option="turbo") +
facet_wrap(.~r_x2)+
labs(title  = "Data split by x2 value") +
geom_smooth(method = "lm", se = F, linewidth = 0.5, aes(color = r_x2)) +
labs(color = "x2")
set.seed(23)
N = 100
x1 = runif(n = N, max = 10) %>% round()
y = 4.2 + 1.5*x1 + rnorm(n = N, sd = 1.3)
origx2<-(3 +rnorm(n = N, sd =.8))
X = cbind(scale(x1),scale(origx2))
c1 = var(X)
chol1 = solve(chol(c1))
newx = X %*% chol1
R2 = matrix(c(1,0.75, 0.75, 1), nrow = 2)
chol2 = chol(R2)
finalx = newx %*% chol2 * sd(x1) + mean(x1)
x2 = finalx[,2]
x2
var(x1)
var(x2)
newx %*% chol2
newx %*% chol2 * sd(x1) + mean(x1)
sd(x1)
sd(x)
sd(x2)
cor(x1,x2)
cor(x1,x2*.2)
x2
origx2
